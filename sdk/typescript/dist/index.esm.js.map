{"version":3,"file":"index.esm.js","sources":["../src/errors.ts","../src/idl/loader.ts","../src/client.ts","../src/types.ts","../src/utils/validation.ts","../src/agent.ts","../src/mcp.ts","../src/payments/prepayment-flow.ts","../src/payments/pay-as-you-go-flow.ts","../src/payments/stream-payment-flow.ts","../src/index.ts"],"sourcesContent":["import { SdkErrorDetails } from './types.js';\n\n/**\n * Base SDK error class\n */\nexport abstract class SdkError extends Error {\n  public readonly code: string;\n  public readonly programErrorCode?: number;\n  public readonly transactionSignature?: string;\n  public override readonly cause?: Error;\n\n  constructor(details: SdkErrorDetails) {\n    super(details.message);\n    this.name = this.constructor.name;\n    this.code = details.code;\n    this.programErrorCode = details.programErrorCode ?? undefined;\n    this.transactionSignature = details.transactionSignature ?? undefined;\n    this.cause = details.cause ?? undefined;\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n\n  toJSON(): Record<string, unknown> {\n    return {\n      name: this.name,\n      message: this.message,\n      code: this.code,\n      programErrorCode: this.programErrorCode,\n      transactionSignature: this.transactionSignature,\n      stack: this.stack,\n      cause: this.cause?.message,\n    };\n  }\n}\n\n/**\n * Validation errors for input parameters\n */\nexport class ValidationError extends SdkError {\n  constructor(message: string, field?: string) {\n    super({\n      code: 'VALIDATION_ERROR',\n      message: field ? `Validation failed for field '${field}': ${message}` : message,\n    });\n  }\n}\n\n/**\n * Network/RPC related errors\n */\nexport class NetworkError extends SdkError {\n  constructor(message: string, cause?: Error) {\n    super({\n      code: 'NETWORK_ERROR',\n      message: `Network error: ${message}`,\n      cause,\n    });\n  }\n}\n\n/**\n * Transaction related errors\n */\nexport class TransactionError extends SdkError {\n  constructor(message: string, signature?: string, programErrorCode?: number, cause?: Error) {\n    super({\n      code: 'TRANSACTION_ERROR',\n      message: `Transaction error: ${message}`,\n      transactionSignature: signature,\n      programErrorCode,\n      cause,\n    });\n  }\n}\n\n/**\n * Program execution errors\n */\nexport class ProgramError extends SdkError {\n  constructor(message: string, programErrorCode: number, signature?: string, cause?: Error) {\n    super({\n      code: 'PROGRAM_ERROR',\n      message: `Program error: ${message}`,\n      programErrorCode,\n      transactionSignature: signature,\n      cause,\n    });\n  }\n}\n\n/**\n * Account related errors\n */\nexport class AccountError extends SdkError {\n  constructor(message: string, cause?: Error) {\n    super({\n      code: 'ACCOUNT_ERROR',\n      message: `Account error: ${message}`,\n      cause,\n    });\n  }\n}\n\n/**\n * IDL loading/parsing errors\n */\nexport class IdlError extends SdkError {\n  constructor(message: string, cause?: Error) {\n    super({\n      code: 'IDL_ERROR',\n      message: `IDL error: ${message}`,\n      cause,\n    });\n  }\n}\n\n/**\n * Payment flow related errors\n */\nexport class PaymentError extends SdkError {\n  constructor(message: string, cause?: Error) {\n    super({\n      code: 'PAYMENT_ERROR',\n      message: `Payment error: ${message}`,\n      cause,\n    });\n  }\n}\n\n/**\n * Configuration errors\n */\nexport class ConfigError extends SdkError {\n  constructor(message: string) {\n    super({\n      code: 'CONFIG_ERROR',\n      message: `Configuration error: ${message}`,\n    });\n  }\n}\n\n/**\n * Registry specific errors\n */\nexport class RegistryError extends SdkError {\n  constructor(message: string, programErrorCode?: number, signature?: string, cause?: Error) {\n    super({\n      code: 'REGISTRY_ERROR',\n      message: `Registry error: ${message}`,\n      programErrorCode,\n      transactionSignature: signature,\n      cause,\n    });\n  }\n}\n\n/**\n * Maps Solana program error codes to meaningful error messages\n */\nexport function mapProgramError(errorCode: number): string {\n  const errorMap: Record<number, string> = {\n    // Common Anchor errors\n    100: 'Invalid instruction data',\n    101: 'Invalid account data',\n    102: 'Invalid program id',\n    103: 'Invalid account owner',\n    104: 'Invalid account info',\n    \n    // Agent Registry specific errors (these would come from the actual program)\n    6000: 'Agent ID already exists',\n    6001: 'Agent ID too long',\n    6002: 'Agent name too long',\n    6003: 'Agent description too long',\n    6004: 'Invalid agent status',\n    6005: 'Unauthorized agent update',\n    6006: 'Agent not found',\n    6007: 'Invalid service endpoint',\n    6008: 'Too many service endpoints',\n    6009: 'Invalid skill definition',\n    6010: 'Too many skills',\n    6011: 'Invalid tag format',\n    6012: 'Too many tags',\n    6013: 'Invalid URL format',\n    6014: 'Insufficient stake amount',\n    6015: 'Invalid lock period',\n    6016: 'Stake still locked',\n    6017: 'Invalid tier for stake amount',\n\n    // MCP Server Registry specific errors\n    6100: 'Server ID already exists', \n    6101: 'Server ID too long',\n    6102: 'Server name too long',\n    6103: 'Invalid server status',\n    6104: 'Unauthorized server update',\n    6105: 'Server not found',\n    6106: 'Invalid endpoint URL',\n    6107: 'Invalid capabilities summary',\n    6108: 'Too many tool definitions',\n    6109: 'Too many resource definitions',\n    6110: 'Too many prompt definitions',\n    6111: 'Invalid tool definition',\n    6112: 'Invalid resource definition',\n    6113: 'Invalid prompt definition',\n\n    // Payment and fee errors\n    6200: 'Insufficient balance',\n    6201: 'Invalid payment amount',\n    6202: 'Payment already completed',\n    6203: 'Payment expired',\n    6204: 'Invalid recipient',\n    6205: 'Fee calculation error',\n    6206: 'Invalid pricing configuration',\n\n    // Token and staking errors\n    6300: 'Invalid token mint',\n    6301: 'Invalid token account',\n    6302: 'Token transfer failed',\n    6303: 'Invalid stake amount',\n    6304: 'Stake account not found',\n    6305: 'Staking period not elapsed',\n    6306: 'Invalid unstake request',\n  };\n\n  return errorMap[errorCode] ?? `Unknown program error: ${errorCode}`;\n}\n\n/**\n * Error factory for creating appropriate error types\n */\nexport class ErrorFactory {\n  static createFromProgramError(errorCode: number, signature?: string, cause?: Error): ProgramError {\n    const message = mapProgramError(errorCode);\n    return new ProgramError(message, errorCode, signature, cause);\n  }\n\n  static createFromTransactionError(error: Error, signature?: string): TransactionError {\n    // Try to extract program error code from Solana transaction error\n    const programErrorMatch = error.message.match(/custom program error: 0x([0-9a-fA-F]+)/);\n    if (programErrorMatch) {\n      const errorCode = parseInt(programErrorMatch[1], 16);\n      return this.createFromProgramError(errorCode, signature, error);\n    }\n\n    return new TransactionError(error.message, signature, undefined, error);\n  }\n\n  static createFromNetworkError(error: Error): NetworkError {\n    return new NetworkError(error.message, error);\n  }\n\n  static createValidationError(message: string, field?: string): ValidationError {\n    return new ValidationError(message, field);\n  }\n}","import { readFileSync } from 'fs';\nimport { createHash } from 'crypto';\nimport { IdlCacheEntry } from '../types.js';\nimport { IdlError } from '../errors.js';\n\n/**\n * IDL loader with caching and hash verification\n */\nexport class IdlLoader {\n  private static cache = new Map<string, IdlCacheEntry>();\n  private static readonly CACHE_TTL = 300_000; // 5 minutes\n\n  /**\n   * Load and cache IDL with hash verification\n   */\n  static async loadIdl(\n    programName: 'agent_registry' | 'mcp_server_registry',\n    expectedHash?: string,\n    forceFresh = false\n  ): Promise<any> {\n    const cacheKey = `${programName}_idl`;\n\n    // Check cache first (unless forcing fresh)\n    if (!forceFresh) {\n      const cached = this.cache.get(cacheKey);\n      if (cached && Date.now() - cached.lastUpdated < this.CACHE_TTL) {\n        return cached.idl;\n      }\n    }\n\n    try {\n      // Load IDL from file\n      const idlPath = this.getIdlPath(programName);\n      const idlContent = readFileSync(idlPath, 'utf8');\n      const idl = JSON.parse(idlContent);\n\n      // Verify hash if provided\n      if (expectedHash) {\n        const actualHash = this.calculateIdlHash(idlContent);\n        if (actualHash !== expectedHash) {\n          throw new IdlError(\n            `IDL hash mismatch for ${programName}. Expected: ${expectedHash}, Actual: ${actualHash}`\n          );\n        }\n      }\n\n      // Cache the IDL\n      this.cache.set(cacheKey, {\n        idl,\n        hash: this.calculateIdlHash(idlContent),\n        lastUpdated: Date.now(),\n      });\n\n      return idl;\n    } catch (error) {\n      if (error instanceof IdlError) {\n        throw error;\n      }\n      throw new IdlError(\n        `Failed to load IDL for ${programName}: ${error instanceof Error ? error.message : 'Unknown error'}`\n      );\n    }\n  }\n\n  /**\n   * Get the cached IDL hash\n   */\n  static getCachedHash(programName: 'agent_registry' | 'mcp_server_registry'): string | undefined {\n    const cacheKey = `${programName}_idl`;\n    return this.cache.get(cacheKey)?.hash;\n  }\n\n  /**\n   * Calculate SHA256 hash of IDL content\n   */\n  static calculateIdlHash(idlContent: string): string {\n    return createHash('sha256').update(idlContent, 'utf8').digest('hex');\n  }\n\n  /**\n   * Get the file path for the IDL\n   */\n  private static getIdlPath(programName: 'agent_registry' | 'mcp_server_registry'): string {\n    // In a real implementation, these paths would be relative to the package root\n    // or loaded from a remote source\n    const basePath = process.env.IDL_BASE_PATH || '../../idl';\n\n    switch (programName) {\n      case 'agent_registry':\n        return `${basePath}/agent_registry.json`;\n      case 'mcp_server_registry':\n        return `${basePath}/mcp_server_registry.json`;\n      default:\n        throw new IdlError(`Unknown program name: ${programName}`);\n    }\n  }\n\n  /**\n   * Clear the IDL cache\n   */\n  static clearCache(): void {\n    this.cache.clear();\n  }\n\n  /**\n   * Get cache statistics\n   */\n  static getCacheStats(): { entries: number; keys: string[] } {\n    return {\n      entries: this.cache.size,\n      keys: Array.from(this.cache.keys()),\n    };\n  }\n}\n\n/**\n * Known IDL hashes for verification (these would be updated when IDLs change)\n */\nexport const KNOWN_IDL_HASHES = {\n  agent_registry: {\n    // These would be the actual hashes of the IDL files\n    mainnet: '0000000000000000000000000000000000000000000000000000000000000000', // placeholder\n    devnet: '0000000000000000000000000000000000000000000000000000000000000000', // placeholder\n    testnet: '0000000000000000000000000000000000000000000000000000000000000000', // placeholder\n  },\n  mcp_server_registry: {\n    mainnet: '0000000000000000000000000000000000000000000000000000000000000000', // placeholder\n    devnet: '0000000000000000000000000000000000000000000000000000000000000000', // placeholder\n    testnet: '0000000000000000000000000000000000000000000000000000000000000000', // placeholder\n  },\n} as const;\n\n/**\n * Load IDL with network-specific hash verification\n */\nexport async function loadIdlForNetwork(\n  programName: 'agent_registry' | 'mcp_server_registry',\n  network: 'mainnet-beta' | 'devnet' | 'testnet',\n  forceFresh = false\n): Promise<any> {\n  const networkKey = network === 'mainnet-beta' ? 'mainnet' : network;\n  const expectedHash = KNOWN_IDL_HASHES[programName][networkKey];\n\n  return IdlLoader.loadIdl(programName, expectedHash, forceFresh);\n}\n","import { \n  Connection, \n  PublicKey, \n  Transaction,\n  VersionedTransaction,\n  Commitment,\n  Cluster,\n  clusterApiUrl,\n} from '@solana/web3.js';\nimport { Program, AnchorProvider, Wallet } from '@coral-xyz/anchor';\nimport { SdkConfig, TransactionResult } from './types.js';\nimport { NetworkError, ConfigError, IdlError } from './errors.js';\nimport { loadIdlForNetwork } from './idl/index.js';\n\n/**\n * Solana connection wrapper with Anchor integration\n */\nexport class SolanaClient {\n  public readonly connection: Connection;\n  public readonly cluster: Cluster;\n  public readonly commitment: Commitment;\n  private provider?: AnchorProvider;\n  private agentRegistryProgram?: Program;\n  private mcpRegistryProgram?: Program;\n\n  constructor(config: SdkConfig) {\n    this.cluster = config.cluster;\n    this.commitment = config.commitment || 'confirmed';\n    \n    // Initialize connection\n    const rpcUrl = config.rpcUrl || clusterApiUrl(this.cluster);\n    this.connection = new Connection(rpcUrl, this.commitment);\n  }\n\n  /**\n   * Initialize the client with a wallet\n   */\n  async initialize(wallet: Wallet): Promise<void> {\n    try {\n      // Create Anchor provider\n      this.provider = new AnchorProvider(\n        this.connection,\n        wallet,\n        {\n          commitment: this.commitment,\n          skipPreflight: false,\n        }\n      );\n\n      // Load and initialize programs\n      await this.initializePrograms();\n    } catch (error) {\n      throw new NetworkError(\n        `Failed to initialize client: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n\n  /**\n   * Get the Anchor provider\n   */\n  getProvider(): AnchorProvider {\n    if (!this.provider) {\n      throw new ConfigError('Client not initialized. Call initialize() first.');\n    }\n    return this.provider;\n  }\n\n  /**\n   * Get the Agent Registry program\n   */\n  getAgentRegistryProgram(): Program {\n    if (!this.agentRegistryProgram) {\n      throw new ConfigError('Agent Registry program not initialized');\n    }\n    return this.agentRegistryProgram;\n  }\n\n  /**\n   * Get the MCP Server Registry program\n   */\n  getMcpRegistryProgram(): Program {\n    if (!this.mcpRegistryProgram) {\n      throw new ConfigError('MCP Server Registry program not initialized');\n    }\n    return this.mcpRegistryProgram;\n  }\n\n  /**\n   * Send and confirm transaction\n   */\n  async sendAndConfirmTransaction(\n    transaction: Transaction | VersionedTransaction,\n    signers?: any[]\n  ): Promise<TransactionResult> {\n    if (!this.provider) {\n      throw new ConfigError('Client not initialized');\n    }\n\n    try {\n      let signature: string;\n      \n      if (transaction instanceof VersionedTransaction) {\n        signature = await this.connection.sendTransaction(transaction);\n      } else {\n        signature = await this.provider.sendAndConfirm(transaction, signers);\n      }\n\n      // Get confirmation details\n      const confirmation = await this.connection.getSignatureStatus(signature, {\n        searchTransactionHistory: true,\n      });\n\n      return {\n        signature,\n        slot: BigInt(confirmation.value?.slot || 0),\n        confirmationStatus: confirmation.value?.confirmationStatus || 'processed',\n      };\n    } catch (error) {\n      throw new NetworkError(\n        `Transaction failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n\n  /**\n   * Get account info with retries\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment\n  ): Promise<any> {\n    try {\n      const accountInfo = await this.connection.getAccountInfo(\n        publicKey,\n        commitment || this.commitment\n      );\n      return accountInfo;\n    } catch (error) {\n      throw new NetworkError(\n        `Failed to get account info: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n\n  /**\n   * Get multiple accounts with batching\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitment?: Commitment\n  ): Promise<any[]> {\n    try {\n      const accountsInfo = await this.connection.getMultipleAccountsInfo(\n        publicKeys,\n        commitment || this.commitment\n      );\n      return accountsInfo;\n    } catch (error) {\n      throw new NetworkError(\n        `Failed to get multiple accounts info: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n\n  /**\n   * Get current slot\n   */\n  async getCurrentSlot(): Promise<bigint> {\n    try {\n      const slot = await this.connection.getSlot(this.commitment);\n      return BigInt(slot);\n    } catch (error) {\n      throw new NetworkError(\n        `Failed to get current slot: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n\n  /**\n   * Check if account exists\n   */\n  async accountExists(publicKey: PublicKey): Promise<boolean> {\n    try {\n      const accountInfo = await this.getAccountInfo(publicKey);\n      return accountInfo !== null;\n    } catch (error) {\n      // If it's a network error, rethrow. Otherwise, assume account doesn't exist.\n      if (error instanceof NetworkError) {\n        throw error;\n      }\n      return false;\n    }\n  }\n\n  /**\n   * Initialize programs with IDLs\n   */\n  private async initializePrograms(): Promise<void> {\n    if (!this.provider) {\n      throw new ConfigError('Provider not initialized');\n    }\n\n    try {\n      // Load IDLs\n      const agentRegistryIdl = await loadIdlForNetwork('agent_registry', this.cluster);\n      const mcpRegistryIdl = await loadIdlForNetwork('mcp_server_registry', this.cluster);\n\n      // Get program IDs from config or use defaults\n      const agentRegistryProgramId = new PublicKey('AgentReg11111111111111111111111111111111111'); // placeholder\n      const mcpRegistryProgramId = new PublicKey('11111111111111111111111111111111'); // placeholder\n\n      // Initialize programs\n      this.agentRegistryProgram = new Program(\n        agentRegistryIdl,\n        this.provider\n      ) as any;\n\n      this.mcpRegistryProgram = new Program(\n        mcpRegistryIdl,\n        this.provider\n      ) as any;\n    } catch (error) {\n      throw new IdlError(\n        `Failed to initialize programs: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n\n  /**\n   * Health check for the connection\n   */\n  async healthCheck(): Promise<{\n    connected: boolean;\n    slot: bigint;\n    version: any;\n    // health: string; // Not available in @solana/web3.js\n  }> {\n    try {\n      const [slot, version] = await Promise.all([\n        this.getCurrentSlot(),\n        this.connection.getVersion(),\n        // this.connection.getHealth(), // Not available in @solana/web3.js\n      ]);\n\n      return {\n        connected: true,\n        slot,\n        version,\n        // health, // Not available\n      };\n    } catch (error) {\n      return {\n        connected: false,\n        slot: 0n,\n        version: null,\n        // health: 'unhealthy', // Not available in @solana/web3.js\n      };\n    }\n  }\n}","import { PublicKey } from '@solana/web3.js';\n\n// Base types\nexport type StringId = string;\nexport type SolanaPublicKey = PublicKey;\nexport type A2AMPLAmount = bigint; // Base units with 9 decimals\n\n// Agent Registry Types\nexport enum AgentStatus {\n  Pending = 0,\n  Active = 1,\n  Inactive = 2,\n  Deregistered = 3,\n}\n\nexport enum AgentTier {\n  Bronze = 'bronze',\n  Silver = 'silver', \n  Gold = 'gold',\n  Platinum = 'platinum',\n}\n\nexport interface AgentServiceEndpoint {\n  protocol: string; // max 64 chars\n  url: string; // max 256 chars\n}\n\nexport interface AgentSkill {\n  id: string; // max 64 chars\n  name: string; // max 128 chars\n  tags: string[]; // max 5 tags, each max 32 chars\n}\n\nexport interface AgentRegistrationData {\n  agentId: StringId; // max 64 chars\n  name: string; // max 128 chars\n  description: string; // max 512 chars\n  version: string; // max 32 chars\n  providerName: string; // max 128 chars\n  providerUrl: string; // max 256 chars\n  documentationUrl?: string; // max 256 chars\n  serviceEndpoints: AgentServiceEndpoint[]; // max 3\n  supportedModes: string[]; // max 5, each max 64 chars\n  skills: AgentSkill[]; // max 10\n  securityInfoUri?: string; // max 256 chars\n  aeaAddress?: string; // max 128 chars\n  economicIntent?: string; // max 256 chars\n  extendedMetadataUri?: string; // max 256 chars\n  tags: string[]; // max 10, each max 32 chars\n}\n\nexport interface AgentUpdateData {\n  name?: string;\n  description?: string;\n  version?: string;\n  providerName?: string;\n  providerUrl?: string;\n  documentationUrl?: string;\n  serviceEndpoints?: AgentServiceEndpoint[];\n  supportedModes?: string[];\n  skills?: AgentSkill[];\n  securityInfoUri?: string;\n  aeaAddress?: string;\n  economicIntent?: string;\n  extendedMetadataUri?: string;\n  tags?: string[];\n}\n\nexport interface AgentRegistryEntry {\n  agentId: StringId;\n  name: string;\n  description: string;\n  version: string;\n  status: AgentStatus;\n  owner: SolanaPublicKey;\n  registrationSlot: bigint;\n  lastUpdateSlot: bigint;\n  providerName: string;\n  providerUrl: string;\n  documentationUrl?: string;\n  serviceEndpoints: AgentServiceEndpoint[];\n  supportedModes: string[];\n  skills: AgentSkill[];\n  securityInfoUri?: string;\n  aeaAddress?: string;\n  economicIntent?: string;\n  extendedMetadataUri?: string;\n  tags: string[];\n  stateVersion: bigint;\n}\n\n// MCP Server Registry Types\nexport enum McpServerStatus {\n  Pending = 0,\n  Active = 1,\n  Inactive = 2,\n  Deregistered = 3,\n}\n\nexport interface McpToolDefinition {\n  name: string; // max 64 chars\n  tags: string[]; // max 3, each max 32 chars\n}\n\nexport interface McpResourceDefinition {\n  uriPattern: string; // max 128 chars\n  tags: string[]; // max 3, each max 32 chars\n}\n\nexport interface McpPromptDefinition {\n  name: string; // max 64 chars\n  tags: string[]; // max 3, each max 32 chars\n}\n\nexport interface McpServerRegistrationData {\n  serverId: StringId; // max 64 chars\n  name: string; // max 128 chars\n  version: string; // max 32 chars\n  endpointUrl: string; // max 256 chars\n  capabilitiesSummary: string; // max 256 chars\n  onchainToolDefinitions: McpToolDefinition[]; // max 5\n  onchainResourceDefinitions: McpResourceDefinition[]; // max 5\n  onchainPromptDefinitions: McpPromptDefinition[]; // max 5\n  fullCapabilitiesUri?: string; // max 256 chars\n  documentationUrl?: string; // max 256 chars\n  tags: string[]; // max 10, each max 32 chars\n}\n\nexport interface McpServerUpdateData {\n  name?: string;\n  version?: string;\n  endpointUrl?: string;\n  capabilitiesSummary?: string;\n  onchainToolDefinitions?: McpToolDefinition[];\n  onchainResourceDefinitions?: McpResourceDefinition[];\n  onchainPromptDefinitions?: McpPromptDefinition[];\n  fullCapabilitiesUri?: string;\n  documentationUrl?: string;\n  tags?: string[];\n}\n\nexport interface McpServerRegistryEntry {\n  serverId: StringId;\n  name: string;\n  version: string;\n  status: McpServerStatus;\n  owner: SolanaPublicKey;\n  registrationSlot: bigint;\n  lastUpdateSlot: bigint;\n  endpointUrl: string;\n  capabilitiesSummary: string;\n  onchainToolDefinitions: McpToolDefinition[];\n  onchainResourceDefinitions: McpResourceDefinition[];\n  onchainPromptDefinitions: McpPromptDefinition[];\n  fullCapabilitiesUri?: string;\n  documentationUrl?: string;\n  tags: string[];\n  stateVersion: bigint;\n}\n\n// Pricing and Payment Types\nexport interface PricingInfo {\n  basePrice: A2AMPLAmount; // in base units (9 decimals)\n  currency: 'A2AMPL';\n  tier?: AgentTier;\n  bulkDiscountPercent?: number; // 0-50\n  priorityMultiplier?: number; // 100-300 (1.0x-3.0x)\n}\n\nexport interface ServicePricing extends PricingInfo {\n  serviceType: 'agent_registration' | 'mcp_registration' | 'tool_usage' | 'resource_access' | 'prompt_usage';\n}\n\nexport interface StakingInfo {\n  amount: A2AMPLAmount;\n  tier: AgentTier;\n  lockPeriod: number; // seconds\n  lockEndSlot: bigint;\n}\n\n// Payment Flow Types\nexport enum PaymentMethod {\n  Prepay = 'prepay',\n  PayAsYouGo = 'pay_as_you_go', \n  Stream = 'stream',\n}\n\nexport interface PaymentFlowConfig {\n  method: PaymentMethod;\n  pricing: PricingInfo;\n  payer: SolanaPublicKey;\n  recipient: SolanaPublicKey;\n}\n\nexport interface PrepaymentConfig extends PaymentFlowConfig {\n  method: PaymentMethod.Prepay;\n  amount: A2AMPLAmount;\n}\n\nexport interface PayAsYouGoConfig extends PaymentFlowConfig {\n  method: PaymentMethod.PayAsYouGo;\n  perUsePrice: A2AMPLAmount;\n}\n\nexport interface StreamConfig extends PaymentFlowConfig {\n  method: PaymentMethod.Stream;\n  ratePerSecond: A2AMPLAmount;\n  duration: number; // seconds\n}\n\n// SDK Configuration Types\nexport interface SdkConfig {\n  cluster: 'mainnet-beta' | 'devnet' | 'testnet';\n  rpcUrl?: string;\n  commitment?: 'confirmed' | 'finalized';\n  agentRegistryProgramId?: SolanaPublicKey;\n  mcpRegistryProgramId?: SolanaPublicKey;\n  a2amplTokenMint?: SolanaPublicKey;\n}\n\n// Error Types\nexport interface SdkErrorDetails {\n  code: string;\n  message: string;\n  programErrorCode?: number;\n  transactionSignature?: string;\n  cause?: Error;\n}\n\n// IDL Types\nexport interface IdlCacheEntry {\n  idl: any; // TODO: Replace with specific IDL types\n  hash: string;\n  lastUpdated: number;\n}\n\n// Network and Transaction Types\nexport interface TransactionResult {\n  signature: string;\n  slot: bigint;\n  confirmationStatus: 'processed' | 'confirmed' | 'finalized';\n}\n\nexport interface ProgramAccount<T> {\n  publicKey: SolanaPublicKey;\n  account: T;\n}\n\n// Constants from program\nexport const CONSTANTS = {\n  // Size limits\n  MAX_AGENT_ID_LEN: 64,\n  MAX_AGENT_NAME_LEN: 128,\n  MAX_AGENT_DESCRIPTION_LEN: 512,\n  MAX_AGENT_VERSION_LEN: 32,\n  MAX_PROVIDER_NAME_LEN: 128,\n  MAX_PROVIDER_URL_LEN: 256,\n  MAX_DOCUMENTATION_URL_LEN: 256,\n  MAX_SERVICE_ENDPOINTS: 3,\n  MAX_ENDPOINT_PROTOCOL_LEN: 64,\n  MAX_ENDPOINT_URL_LEN: 256,\n  MAX_SUPPORTED_MODES: 5,\n  MAX_MODE_LEN: 64,\n  MAX_SKILLS: 10,\n  MAX_SKILL_ID_LEN: 64,\n  MAX_SKILL_NAME_LEN: 128,\n  MAX_SKILL_TAGS: 5,\n  MAX_SKILL_TAG_LEN: 32,\n  MAX_SECURITY_INFO_URI_LEN: 256,\n  MAX_AEA_ADDRESS_LEN: 128,\n  MAX_ECONOMIC_INTENT_LEN: 256,\n  MAX_EXTENDED_METADATA_URI_LEN: 256,\n  MAX_AGENT_TAGS: 10,\n  MAX_AGENT_TAG_LEN: 32,\n\n  // MCP Server limits\n  MAX_SERVER_ID_LEN: 64,\n  MAX_SERVER_NAME_LEN: 128,\n  MAX_SERVER_VERSION_LEN: 32,\n  MAX_SERVER_ENDPOINT_URL_LEN: 256,\n  MAX_SERVER_CAPABILITIES_SUMMARY_LEN: 256,\n  MAX_ONCHAIN_TOOL_DEFINITIONS: 5,\n  MAX_TOOL_NAME_LEN: 64,\n  MAX_TOOL_TAGS: 3,\n  MAX_TOOL_TAG_LEN: 32,\n  MAX_ONCHAIN_RESOURCE_DEFINITIONS: 5,\n  MAX_RESOURCE_URI_PATTERN_LEN: 128,\n  MAX_RESOURCE_TAGS: 3,\n  MAX_RESOURCE_TAG_LEN: 32,\n  MAX_ONCHAIN_PROMPT_DEFINITIONS: 5,\n  MAX_PROMPT_NAME_LEN: 64,\n  MAX_PROMPT_TAGS: 3,\n  MAX_PROMPT_TAG_LEN: 32,\n  MAX_FULL_CAPABILITIES_URI_LEN: 256,\n  MAX_SERVER_TAGS: 10,\n  MAX_SERVER_TAG_LEN: 32,\n\n  // Token amounts (in base units)\n  A2AMPL_DECIMALS: 9,\n  A2AMPL_BASE_UNIT: 1_000_000_000n,\n  AGENT_REGISTRATION_FEE: 100_000_000_000n, // 100 A2AMPL\n  MCP_REGISTRATION_FEE: 50_000_000_000n, // 50 A2AMPL\n  \n  // Staking amounts\n  BRONZE_TIER_STAKE: 1_000_000_000_000n, // 1,000 A2AMPL\n  SILVER_TIER_STAKE: 10_000_000_000_000n, // 10,000 A2AMPL\n  GOLD_TIER_STAKE: 50_000_000_000_000n, // 50,000 A2AMPL\n  PLATINUM_TIER_STAKE: 100_000_000_000_000n, // 100,000 A2AMPL\n\n  // Lock periods (seconds)\n  BRONZE_LOCK_PERIOD: 2_592_000, // 30 days\n  SILVER_LOCK_PERIOD: 7_776_000, // 90 days\n  GOLD_LOCK_PERIOD: 15_552_000, // 180 days\n  PLATINUM_LOCK_PERIOD: 31_536_000, // 365 days\n\n  // Service fees\n  MIN_SERVICE_FEE: 1_000_000_000n, // 1.0 A2AMPL\n  MIN_TOOL_FEE: 1_000_000_000n, // 1.0 A2AMPL\n  MIN_RESOURCE_FEE: 500_000_000n, // 0.5 A2AMPL\n  MIN_PROMPT_FEE: 2_000_000_000n, // 2.0 A2AMPL\n\n  // Priority and quality\n  MIN_PRIORITY_MULTIPLIER: 100, // 1.0x\n  MAX_PRIORITY_MULTIPLIER: 300, // 3.0x\n  MAX_BULK_DISCOUNT: 50, // 50%\n  MIN_UPTIME_FOR_PREMIUM: 95, // 95%\n\n  // PDA seeds\n  AGENT_REGISTRY_PDA_SEED: 'agent_reg_v1',\n  MCP_SERVER_REGISTRY_PDA_SEED: 'mcp_srv_reg_v1',\n  STAKING_VAULT_SEED: 'staking_vault',\n  FEE_VAULT_SEED: 'fee_vault',\n  REGISTRATION_VAULT_SEED: 'registration_vault',\n} as const;\n\n// Token mint addresses\nexport const TOKEN_MINTS = {\n  mainnet: new PublicKey('Cpzvdx6pppc9TNArsGsqgShCsKC9NCCjA2gtzHvUpump'),\n  devnet: new PublicKey('A2AMPLyncKHwfSnwRNsJ2qsjsetgo9fGkP8YZPsDZ9mE'),\n} as const;\n\n// Program IDs (placeholders - to be updated with actual program IDs)\nexport const PROGRAM_IDS = {\n  agentRegistry: new PublicKey('AgentReg11111111111111111111111111111111111'),\n  mcpServerRegistry: new PublicKey('11111111111111111111111111111111'), // TBD\n} as const;","import { PublicKey } from '@solana/web3.js';\nimport {\n  AgentRegistrationData,\n  AgentUpdateData,\n  McpServerRegistrationData,\n  McpServerUpdateData,\n  AgentServiceEndpoint,\n  AgentSkill,\n  McpToolDefinition,\n  McpResourceDefinition,\n  McpPromptDefinition,\n  CONSTANTS,\n} from '../types.js';\nimport { ValidationError } from '../errors.js';\n\n/**\n * Validation utilities for SDK inputs\n */\nexport class Validator {\n  /**\n   * Validates string length\n   */\n  static validateStringLength(value: string, maxLength: number, fieldName: string): void {\n    if (value.length > maxLength) {\n      throw new ValidationError(\n        `${fieldName} exceeds maximum length of ${maxLength} characters`,\n        fieldName\n      );\n    }\n  }\n\n  /**\n   * Validates required string field\n   */\n  static validateRequiredString(\n    value: string | undefined,\n    fieldName: string,\n    maxLength?: number\n  ): void {\n    if (!value || value.trim().length === 0) {\n      throw new ValidationError(`${fieldName} is required and cannot be empty`, fieldName);\n    }\n    if (maxLength) {\n      this.validateStringLength(value, maxLength, fieldName);\n    }\n  }\n\n  /**\n   * Validates optional string field\n   */\n  static validateOptionalString(\n    value: string | undefined,\n    fieldName: string,\n    maxLength: number\n  ): void {\n    if (value !== undefined) {\n      this.validateStringLength(value, maxLength, fieldName);\n    }\n  }\n\n  /**\n   * Validates URL format\n   */\n  static validateUrl(\n    url: string,\n    fieldName: string,\n    allowedProtocols: string[] = ['http:', 'https:']\n  ): void {\n    try {\n      const urlObj = new URL(url);\n      if (!allowedProtocols.includes(urlObj.protocol)) {\n        throw new ValidationError(\n          `${fieldName} must use one of the following protocols: ${allowedProtocols.join(', ')}`,\n          fieldName\n        );\n      }\n    } catch (error) {\n      if (error instanceof ValidationError) throw error;\n      throw new ValidationError(`${fieldName} is not a valid URL`, fieldName);\n    }\n  }\n\n  /**\n   * Validates array length\n   */\n  static validateArrayLength<T>(array: T[], maxLength: number, fieldName: string): void {\n    if (array.length > maxLength) {\n      throw new ValidationError(`${fieldName} exceeds maximum of ${maxLength} items`, fieldName);\n    }\n  }\n\n  /**\n   * Validates PublicKey\n   */\n  static validatePublicKey(key: PublicKey | string, fieldName: string): PublicKey {\n    try {\n      return typeof key === 'string' ? new PublicKey(key) : key;\n    } catch (error) {\n      throw new ValidationError(`${fieldName} is not a valid Solana public key`, fieldName);\n    }\n  }\n\n  /**\n   * Validates agent ID format (alphanumeric, hyphens, underscores only)\n   */\n  static validateAgentId(agentId: string): void {\n    this.validateRequiredString(agentId, 'agentId', CONSTANTS.MAX_AGENT_ID_LEN);\n\n    const validPattern = /^[a-zA-Z0-9_-]+$/;\n    if (!validPattern.test(agentId)) {\n      throw new ValidationError(\n        'Agent ID can only contain alphanumeric characters, hyphens, and underscores',\n        'agentId'\n      );\n    }\n  }\n\n  /**\n   * Validates server ID format (same as agent ID)\n   */\n  static validateServerId(serverId: string): void {\n    this.validateRequiredString(serverId, 'serverId', CONSTANTS.MAX_SERVER_ID_LEN);\n\n    const validPattern = /^[a-zA-Z0-9_-]+$/;\n    if (!validPattern.test(serverId)) {\n      throw new ValidationError(\n        'Server ID can only contain alphanumeric characters, hyphens, and underscores',\n        'serverId'\n      );\n    }\n  }\n\n  /**\n   * Validates service endpoint\n   */\n  static validateServiceEndpoint(endpoint: AgentServiceEndpoint, index: number): void {\n    const fieldPrefix = `serviceEndpoints[${index}]`;\n\n    this.validateRequiredString(\n      endpoint.protocol,\n      `${fieldPrefix}.protocol`,\n      CONSTANTS.MAX_ENDPOINT_PROTOCOL_LEN\n    );\n    this.validateRequiredString(endpoint.url, `${fieldPrefix}.url`, CONSTANTS.MAX_ENDPOINT_URL_LEN);\n    this.validateUrl(endpoint.url, `${fieldPrefix}.url`);\n  }\n\n  /**\n   * Validates agent skill\n   */\n  static validateAgentSkill(skill: AgentSkill, index: number): void {\n    const fieldPrefix = `skills[${index}]`;\n\n    this.validateRequiredString(skill.id, `${fieldPrefix}.id`, CONSTANTS.MAX_SKILL_ID_LEN);\n    this.validateRequiredString(skill.name, `${fieldPrefix}.name`, CONSTANTS.MAX_SKILL_NAME_LEN);\n    this.validateArrayLength(skill.tags, CONSTANTS.MAX_SKILL_TAGS, `${fieldPrefix}.tags`);\n\n    skill.tags.forEach((tag, tagIndex) => {\n      this.validateRequiredString(\n        tag,\n        `${fieldPrefix}.tags[${tagIndex}]`,\n        CONSTANTS.MAX_SKILL_TAG_LEN\n      );\n    });\n  }\n\n  /**\n   * Validates MCP tool definition\n   */\n  static validateMcpToolDefinition(tool: McpToolDefinition, index: number): void {\n    const fieldPrefix = `onchainToolDefinitions[${index}]`;\n\n    this.validateRequiredString(tool.name, `${fieldPrefix}.name`, CONSTANTS.MAX_TOOL_NAME_LEN);\n    this.validateArrayLength(tool.tags, CONSTANTS.MAX_TOOL_TAGS, `${fieldPrefix}.tags`);\n\n    tool.tags.forEach((tag, tagIndex) => {\n      this.validateRequiredString(\n        tag,\n        `${fieldPrefix}.tags[${tagIndex}]`,\n        CONSTANTS.MAX_TOOL_TAG_LEN\n      );\n    });\n  }\n\n  /**\n   * Validates MCP resource definition\n   */\n  static validateMcpResourceDefinition(resource: McpResourceDefinition, index: number): void {\n    const fieldPrefix = `onchainResourceDefinitions[${index}]`;\n\n    this.validateRequiredString(\n      resource.uriPattern,\n      `${fieldPrefix}.uriPattern`,\n      CONSTANTS.MAX_RESOURCE_URI_PATTERN_LEN\n    );\n    this.validateArrayLength(resource.tags, CONSTANTS.MAX_RESOURCE_TAGS, `${fieldPrefix}.tags`);\n\n    resource.tags.forEach((tag, tagIndex) => {\n      this.validateRequiredString(\n        tag,\n        `${fieldPrefix}.tags[${tagIndex}]`,\n        CONSTANTS.MAX_RESOURCE_TAG_LEN\n      );\n    });\n  }\n\n  /**\n   * Validates MCP prompt definition\n   */\n  static validateMcpPromptDefinition(prompt: McpPromptDefinition, index: number): void {\n    const fieldPrefix = `onchainPromptDefinitions[${index}]`;\n\n    this.validateRequiredString(prompt.name, `${fieldPrefix}.name`, CONSTANTS.MAX_PROMPT_NAME_LEN);\n    this.validateArrayLength(prompt.tags, CONSTANTS.MAX_PROMPT_TAGS, `${fieldPrefix}.tags`);\n\n    prompt.tags.forEach((tag, tagIndex) => {\n      this.validateRequiredString(\n        tag,\n        `${fieldPrefix}.tags[${tagIndex}]`,\n        CONSTANTS.MAX_PROMPT_TAG_LEN\n      );\n    });\n  }\n\n  /**\n   * Validates agent registration data\n   */\n  static validateAgentRegistrationData(data: AgentRegistrationData): void {\n    // Basic required fields\n    this.validateAgentId(data.agentId);\n    this.validateRequiredString(data.name, 'name', CONSTANTS.MAX_AGENT_NAME_LEN);\n    this.validateRequiredString(\n      data.description,\n      'description',\n      CONSTANTS.MAX_AGENT_DESCRIPTION_LEN\n    );\n    this.validateRequiredString(data.version, 'version', CONSTANTS.MAX_AGENT_VERSION_LEN);\n    this.validateRequiredString(data.providerName, 'providerName', CONSTANTS.MAX_PROVIDER_NAME_LEN);\n    this.validateRequiredString(data.providerUrl, 'providerUrl', CONSTANTS.MAX_PROVIDER_URL_LEN);\n\n    // Validate provider URL format\n    this.validateUrl(data.providerUrl, 'providerUrl');\n\n    // Optional fields\n    this.validateOptionalString(\n      data.documentationUrl,\n      'documentationUrl',\n      CONSTANTS.MAX_DOCUMENTATION_URL_LEN\n    );\n    if (data.documentationUrl) {\n      this.validateUrl(data.documentationUrl, 'documentationUrl');\n    }\n\n    this.validateOptionalString(\n      data.securityInfoUri,\n      'securityInfoUri',\n      CONSTANTS.MAX_SECURITY_INFO_URI_LEN\n    );\n    if (data.securityInfoUri) {\n      this.validateUrl(data.securityInfoUri, 'securityInfoUri', [\n        'http:',\n        'https:',\n        'ipfs:',\n        'ar:',\n      ]);\n    }\n\n    this.validateOptionalString(data.aeaAddress, 'aeaAddress', CONSTANTS.MAX_AEA_ADDRESS_LEN);\n    this.validateOptionalString(\n      data.economicIntent,\n      'economicIntent',\n      CONSTANTS.MAX_ECONOMIC_INTENT_LEN\n    );\n    this.validateOptionalString(\n      data.extendedMetadataUri,\n      'extendedMetadataUri',\n      CONSTANTS.MAX_EXTENDED_METADATA_URI_LEN\n    );\n    if (data.extendedMetadataUri) {\n      this.validateUrl(data.extendedMetadataUri, 'extendedMetadataUri', [\n        'http:',\n        'https:',\n        'ipfs:',\n        'ar:',\n      ]);\n    }\n\n    // Arrays\n    this.validateArrayLength(\n      data.serviceEndpoints,\n      CONSTANTS.MAX_SERVICE_ENDPOINTS,\n      'serviceEndpoints'\n    );\n    data.serviceEndpoints.forEach((endpoint, index) => {\n      this.validateServiceEndpoint(endpoint, index);\n    });\n\n    this.validateArrayLength(data.supportedModes, CONSTANTS.MAX_SUPPORTED_MODES, 'supportedModes');\n    data.supportedModes.forEach((mode, index) => {\n      this.validateRequiredString(mode, `supportedModes[${index}]`, CONSTANTS.MAX_MODE_LEN);\n    });\n\n    this.validateArrayLength(data.skills, CONSTANTS.MAX_SKILLS, 'skills');\n    data.skills.forEach((skill, index) => {\n      this.validateAgentSkill(skill, index);\n    });\n\n    this.validateArrayLength(data.tags, CONSTANTS.MAX_AGENT_TAGS, 'tags');\n    data.tags.forEach((tag, index) => {\n      this.validateRequiredString(tag, `tags[${index}]`, CONSTANTS.MAX_AGENT_TAG_LEN);\n    });\n  }\n\n  /**\n   * Validates agent update data\n   */\n  static validateAgentUpdateData(data: AgentUpdateData): void {\n    // Validate only the fields that are provided\n    if (data.name !== undefined) {\n      this.validateRequiredString(data.name, 'name', CONSTANTS.MAX_AGENT_NAME_LEN);\n    }\n    if (data.description !== undefined) {\n      this.validateRequiredString(\n        data.description,\n        'description',\n        CONSTANTS.MAX_AGENT_DESCRIPTION_LEN\n      );\n    }\n    if (data.version !== undefined) {\n      this.validateRequiredString(data.version, 'version', CONSTANTS.MAX_AGENT_VERSION_LEN);\n    }\n    if (data.providerName !== undefined) {\n      this.validateRequiredString(\n        data.providerName,\n        'providerName',\n        CONSTANTS.MAX_PROVIDER_NAME_LEN\n      );\n    }\n    if (data.providerUrl !== undefined) {\n      this.validateRequiredString(data.providerUrl, 'providerUrl', CONSTANTS.MAX_PROVIDER_URL_LEN);\n      this.validateUrl(data.providerUrl, 'providerUrl');\n    }\n    if (data.documentationUrl !== undefined) {\n      this.validateOptionalString(\n        data.documentationUrl,\n        'documentationUrl',\n        CONSTANTS.MAX_DOCUMENTATION_URL_LEN\n      );\n      if (data.documentationUrl) {\n        this.validateUrl(data.documentationUrl, 'documentationUrl');\n      }\n    }\n    if (data.securityInfoUri !== undefined) {\n      this.validateOptionalString(\n        data.securityInfoUri,\n        'securityInfoUri',\n        CONSTANTS.MAX_SECURITY_INFO_URI_LEN\n      );\n      if (data.securityInfoUri) {\n        this.validateUrl(data.securityInfoUri, 'securityInfoUri', [\n          'http:',\n          'https:',\n          'ipfs:',\n          'ar:',\n        ]);\n      }\n    }\n    if (data.aeaAddress !== undefined) {\n      this.validateOptionalString(data.aeaAddress, 'aeaAddress', CONSTANTS.MAX_AEA_ADDRESS_LEN);\n    }\n    if (data.economicIntent !== undefined) {\n      this.validateOptionalString(\n        data.economicIntent,\n        'economicIntent',\n        CONSTANTS.MAX_ECONOMIC_INTENT_LEN\n      );\n    }\n    if (data.extendedMetadataUri !== undefined) {\n      this.validateOptionalString(\n        data.extendedMetadataUri,\n        'extendedMetadataUri',\n        CONSTANTS.MAX_EXTENDED_METADATA_URI_LEN\n      );\n      if (data.extendedMetadataUri) {\n        this.validateUrl(data.extendedMetadataUri, 'extendedMetadataUri', [\n          'http:',\n          'https:',\n          'ipfs:',\n          'ar:',\n        ]);\n      }\n    }\n\n    if (data.serviceEndpoints !== undefined) {\n      this.validateArrayLength(\n        data.serviceEndpoints,\n        CONSTANTS.MAX_SERVICE_ENDPOINTS,\n        'serviceEndpoints'\n      );\n      data.serviceEndpoints.forEach((endpoint, index) => {\n        this.validateServiceEndpoint(endpoint, index);\n      });\n    }\n\n    if (data.supportedModes !== undefined) {\n      this.validateArrayLength(\n        data.supportedModes,\n        CONSTANTS.MAX_SUPPORTED_MODES,\n        'supportedModes'\n      );\n      data.supportedModes.forEach((mode, index) => {\n        this.validateRequiredString(mode, `supportedModes[${index}]`, CONSTANTS.MAX_MODE_LEN);\n      });\n    }\n\n    if (data.skills !== undefined) {\n      this.validateArrayLength(data.skills, CONSTANTS.MAX_SKILLS, 'skills');\n      data.skills.forEach((skill, index) => {\n        this.validateAgentSkill(skill, index);\n      });\n    }\n\n    if (data.tags !== undefined) {\n      this.validateArrayLength(data.tags, CONSTANTS.MAX_AGENT_TAGS, 'tags');\n      data.tags.forEach((tag, index) => {\n        this.validateRequiredString(tag, `tags[${index}]`, CONSTANTS.MAX_AGENT_TAG_LEN);\n      });\n    }\n  }\n\n  /**\n   * Validates MCP server registration data\n   */\n  static validateMcpServerRegistrationData(data: McpServerRegistrationData): void {\n    // Basic required fields\n    this.validateServerId(data.serverId);\n    this.validateRequiredString(data.name, 'name', CONSTANTS.MAX_SERVER_NAME_LEN);\n    this.validateRequiredString(data.version, 'version', CONSTANTS.MAX_SERVER_VERSION_LEN);\n    this.validateRequiredString(\n      data.endpointUrl,\n      'endpointUrl',\n      CONSTANTS.MAX_SERVER_ENDPOINT_URL_LEN\n    );\n    this.validateRequiredString(\n      data.capabilitiesSummary,\n      'capabilitiesSummary',\n      CONSTANTS.MAX_SERVER_CAPABILITIES_SUMMARY_LEN\n    );\n\n    // Validate endpoint URL format\n    this.validateUrl(data.endpointUrl, 'endpointUrl');\n\n    // Optional fields\n    this.validateOptionalString(\n      data.fullCapabilitiesUri,\n      'fullCapabilitiesUri',\n      CONSTANTS.MAX_FULL_CAPABILITIES_URI_LEN\n    );\n    if (data.fullCapabilitiesUri) {\n      this.validateUrl(data.fullCapabilitiesUri, 'fullCapabilitiesUri', [\n        'http:',\n        'https:',\n        'ipfs:',\n        'ar:',\n      ]);\n    }\n\n    this.validateOptionalString(\n      data.documentationUrl,\n      'documentationUrl',\n      CONSTANTS.MAX_DOCUMENTATION_URL_LEN\n    );\n    if (data.documentationUrl) {\n      this.validateUrl(data.documentationUrl, 'documentationUrl');\n    }\n\n    // Arrays\n    this.validateArrayLength(\n      data.onchainToolDefinitions,\n      CONSTANTS.MAX_ONCHAIN_TOOL_DEFINITIONS,\n      'onchainToolDefinitions'\n    );\n    data.onchainToolDefinitions.forEach((tool, index) => {\n      this.validateMcpToolDefinition(tool, index);\n    });\n\n    this.validateArrayLength(\n      data.onchainResourceDefinitions,\n      CONSTANTS.MAX_ONCHAIN_RESOURCE_DEFINITIONS,\n      'onchainResourceDefinitions'\n    );\n    data.onchainResourceDefinitions.forEach((resource, index) => {\n      this.validateMcpResourceDefinition(resource, index);\n    });\n\n    this.validateArrayLength(\n      data.onchainPromptDefinitions,\n      CONSTANTS.MAX_ONCHAIN_PROMPT_DEFINITIONS,\n      'onchainPromptDefinitions'\n    );\n    data.onchainPromptDefinitions.forEach((prompt, index) => {\n      this.validateMcpPromptDefinition(prompt, index);\n    });\n\n    this.validateArrayLength(data.tags, CONSTANTS.MAX_SERVER_TAGS, 'tags');\n    data.tags.forEach((tag, index) => {\n      this.validateRequiredString(tag, `tags[${index}]`, CONSTANTS.MAX_SERVER_TAG_LEN);\n    });\n  }\n\n  /**\n   * Validates MCP server update data\n   */\n  static validateMcpServerUpdateData(data: McpServerUpdateData): void {\n    // Validate only the fields that are provided\n    if (data.name !== undefined) {\n      this.validateRequiredString(data.name, 'name', CONSTANTS.MAX_SERVER_NAME_LEN);\n    }\n    if (data.version !== undefined) {\n      this.validateRequiredString(data.version, 'version', CONSTANTS.MAX_SERVER_VERSION_LEN);\n    }\n    if (data.endpointUrl !== undefined) {\n      this.validateRequiredString(\n        data.endpointUrl,\n        'endpointUrl',\n        CONSTANTS.MAX_SERVER_ENDPOINT_URL_LEN\n      );\n      this.validateUrl(data.endpointUrl, 'endpointUrl');\n    }\n    if (data.capabilitiesSummary !== undefined) {\n      this.validateRequiredString(\n        data.capabilitiesSummary,\n        'capabilitiesSummary',\n        CONSTANTS.MAX_SERVER_CAPABILITIES_SUMMARY_LEN\n      );\n    }\n    if (data.fullCapabilitiesUri !== undefined) {\n      this.validateOptionalString(\n        data.fullCapabilitiesUri,\n        'fullCapabilitiesUri',\n        CONSTANTS.MAX_FULL_CAPABILITIES_URI_LEN\n      );\n      if (data.fullCapabilitiesUri) {\n        this.validateUrl(data.fullCapabilitiesUri, 'fullCapabilitiesUri', [\n          'http:',\n          'https:',\n          'ipfs:',\n          'ar:',\n        ]);\n      }\n    }\n    if (data.documentationUrl !== undefined) {\n      this.validateOptionalString(\n        data.documentationUrl,\n        'documentationUrl',\n        CONSTANTS.MAX_DOCUMENTATION_URL_LEN\n      );\n      if (data.documentationUrl) {\n        this.validateUrl(data.documentationUrl, 'documentationUrl');\n      }\n    }\n\n    if (data.onchainToolDefinitions !== undefined) {\n      this.validateArrayLength(\n        data.onchainToolDefinitions,\n        CONSTANTS.MAX_ONCHAIN_TOOL_DEFINITIONS,\n        'onchainToolDefinitions'\n      );\n      data.onchainToolDefinitions.forEach((tool, index) => {\n        this.validateMcpToolDefinition(tool, index);\n      });\n    }\n\n    if (data.onchainResourceDefinitions !== undefined) {\n      this.validateArrayLength(\n        data.onchainResourceDefinitions,\n        CONSTANTS.MAX_ONCHAIN_RESOURCE_DEFINITIONS,\n        'onchainResourceDefinitions'\n      );\n      data.onchainResourceDefinitions.forEach((resource, index) => {\n        this.validateMcpResourceDefinition(resource, index);\n      });\n    }\n\n    if (data.onchainPromptDefinitions !== undefined) {\n      this.validateArrayLength(\n        data.onchainPromptDefinitions,\n        CONSTANTS.MAX_ONCHAIN_PROMPT_DEFINITIONS,\n        'onchainPromptDefinitions'\n      );\n      data.onchainPromptDefinitions.forEach((prompt, index) => {\n        this.validateMcpPromptDefinition(prompt, index);\n      });\n    }\n\n    if (data.tags !== undefined) {\n      this.validateArrayLength(data.tags, CONSTANTS.MAX_SERVER_TAGS, 'tags');\n      data.tags.forEach((tag, index) => {\n        this.validateRequiredString(tag, `tags[${index}]`, CONSTANTS.MAX_SERVER_TAG_LEN);\n      });\n    }\n  }\n}\n","import { PublicKey, Transaction } from '@solana/web3.js';\nimport { SolanaClient } from './client.js';\nimport { SdkError, ValidationError } from './errors.js';\nimport {\n  AgentRegistrationData,\n  AgentUpdateData,\n  AgentRegistryEntry,\n  AgentStatus,\n  AgentTier,\n  StakingInfo,\n  TransactionResult,\n  ProgramAccount,\n  A2AMPLAmount,\n  CONSTANTS,\n} from './types.js';\nimport { Validator } from './utils/validation.js';\nimport { RegistryError, AccountError } from './errors.js';\n\n/**\n * Agent Registry API for managing autonomous agents\n */\nexport class AgentAPI {\n  constructor(private client: SolanaClient) {}\n\n  /**\n   * Register a new agent\n   */\n  async registerAgent(data: AgentRegistrationData, stakingTier?: AgentTier): Promise<TransactionResult> {\n    // Validate input data\n    Validator.validateAgentRegistrationData(data);\n\n    try {\n      const program = this.client.getAgentRegistryProgram();\n      const provider = this.client.getProvider();\n\n      // Derive PDA for agent account\n      const [agentPda] = PublicKey.findProgramAddressSync(\n        [\n          Buffer.from(CONSTANTS.AGENT_REGISTRY_PDA_SEED),\n          Buffer.from(data.agentId),\n          provider.wallet.publicKey.toBuffer(),\n        ],\n        program.programId\n      );\n\n      // Check if agent already exists\n      if (await this.client.accountExists(agentPda)) {\n        throw new RegistryError(`Agent with ID '${data.agentId}' already exists`);\n      }\n\n      // Calculate registration fee\n      const registrationFee = CONSTANTS.AGENT_REGISTRATION_FEE;\n      \n      // Calculate staking amount if tier is specified\n      let stakingAmount = 0n;\n      if (stakingTier) {\n        stakingAmount = this.getStakingAmountForTier(stakingTier);\n      }\n\n      // Build transaction\n      const transaction = new Transaction();\n\n      // Add agent registration instruction\n      if (!program.methods) {\n        throw new ValidationError('Program methods not available');\n      }\n      const registerInstruction = await program.methods\n        .registerAgent({\n          agentId: data.agentId,\n          name: data.name,\n          description: data.description,\n          version: data.version,\n          providerName: data.providerName,\n          providerUrl: data.providerUrl,\n          documentationUrl: data.documentationUrl,\n          serviceEndpoints: data.serviceEndpoints,\n          supportedModes: data.supportedModes,\n          skills: data.skills,\n          securityInfoUri: data.securityInfoUri,\n          aeaAddress: data.aeaAddress,\n          economicIntent: data.economicIntent,\n          extendedMetadataUri: data.extendedMetadataUri,\n          tags: data.tags,\n        })\n        .accounts({\n          agentAccount: agentPda,\n          owner: provider.wallet.publicKey,\n          systemProgram: PublicKey.default, // SystemProgram.programId\n        })\n        .instruction();\n\n      transaction.add(registerInstruction);\n\n      // Add staking instruction if required\n      if (stakingAmount > 0n) {\n        const stakingInstruction = await this.createStakingInstruction(\n          agentPda,\n          stakingAmount,\n          stakingTier!\n        );\n        transaction.add(stakingInstruction);\n      }\n\n      return await this.client.sendAndConfirmTransaction(transaction);\n    } catch (error) {\n      throw new RegistryError(\n        `Failed to register agent: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        undefined,\n        undefined,\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n\n  /**\n   * Update an existing agent\n   */\n  async updateAgent(agentId: string, data: AgentUpdateData): Promise<TransactionResult> {\n    // Validate inputs\n    Validator.validateAgentId(agentId);\n    Validator.validateAgentUpdateData(data);\n\n    try {\n      const program = this.client.getAgentRegistryProgram();\n      const provider = this.client.getProvider();\n\n      // Derive PDA for agent account\n      const [agentPda] = PublicKey.findProgramAddressSync(\n        [\n          Buffer.from(CONSTANTS.AGENT_REGISTRY_PDA_SEED),\n          Buffer.from(agentId),\n          provider.wallet.publicKey.toBuffer(),\n        ],\n        program.programId\n      );\n\n      // Check if agent exists\n      if (!(await this.client.accountExists(agentPda))) {\n        throw new RegistryError(`Agent with ID '${agentId}' not found`);\n      }\n\n      // Get current agent data for version checking\n      const currentAgent = await this.getAgent(agentId);\n      \n      // Build update instruction\n      if (!program.methods) {\n        throw new ValidationError('Program methods not available');\n      }\n      const updateInstruction = await program.methods\n        .updateAgent({\n          name: data.name,\n          description: data.description,\n          version: data.version,\n          providerName: data.providerName,\n          providerUrl: data.providerUrl,\n          documentationUrl: data.documentationUrl,\n          serviceEndpoints: data.serviceEndpoints,\n          supportedModes: data.supportedModes,\n          skills: data.skills,\n          securityInfoUri: data.securityInfoUri,\n          aeaAddress: data.aeaAddress,\n          economicIntent: data.economicIntent,\n          extendedMetadataUri: data.extendedMetadataUri,\n          tags: data.tags,\n          expectedStateVersion: currentAgent.stateVersion,\n        })\n        .accounts({\n          agentAccount: agentPda,\n          owner: provider.wallet.publicKey,\n        })\n        .instruction();\n\n      const transaction = new Transaction().add(updateInstruction);\n      return await this.client.sendAndConfirmTransaction(transaction);\n    } catch (error) {\n      throw new RegistryError(\n        `Failed to update agent: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        undefined,\n        undefined,\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n\n  /**\n   * Deregister an agent\n   */\n  async deregisterAgent(agentId: string): Promise<TransactionResult> {\n    Validator.validateAgentId(agentId);\n\n    try {\n      const program = this.client.getAgentRegistryProgram();\n      const provider = this.client.getProvider();\n\n      // Derive PDA for agent account\n      const [agentPda] = PublicKey.findProgramAddressSync(\n        [\n          Buffer.from(CONSTANTS.AGENT_REGISTRY_PDA_SEED),\n          Buffer.from(agentId),\n          provider.wallet.publicKey.toBuffer(),\n        ],\n        program.programId\n      );\n\n      // Check if agent exists\n      if (!(await this.client.accountExists(agentPda))) {\n        throw new RegistryError(`Agent with ID '${agentId}' not found`);\n      }\n\n      const deregisterInstruction = await program.methods\n        .deregisterAgent()\n        .accounts({\n          agentAccount: agentPda,\n          owner: provider.wallet.publicKey,\n        })\n        .instruction();\n\n      const transaction = new Transaction().add(deregisterInstruction);\n      return await this.client.sendAndConfirmTransaction(transaction);\n    } catch (error) {\n      throw new RegistryError(\n        `Failed to deregister agent: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        undefined,\n        undefined,\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n\n  /**\n   * Get agent by ID\n   */\n  async getAgent(agentId: string): Promise<AgentRegistryEntry> {\n    Validator.validateAgentId(agentId);\n\n    try {\n      const program = this.client.getAgentRegistryProgram();\n      const provider = this.client.getProvider();\n\n      // Derive PDA for agent account\n      const [agentPda] = PublicKey.findProgramAddressSync(\n        [\n          Buffer.from(CONSTANTS.AGENT_REGISTRY_PDA_SEED),\n          Buffer.from(agentId),\n          provider.wallet.publicKey.toBuffer(),\n        ],\n        program.programId\n      );\n\n      const account = await (program.account as any).agentRegistryEntryV1.fetch(agentPda);\n      \n      return this.parseAgentAccount(account, agentPda);\n    } catch (error) {\n      throw new AccountError(\n        `Failed to get agent '${agentId}': ${error instanceof Error ? error.message : 'Agent not found'}`,\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n\n  /**\n   * List agents by owner\n   */\n  async listAgentsByOwner(owner?: PublicKey): Promise<ProgramAccount<AgentRegistryEntry>[]> {\n    try {\n      const program = this.client.getAgentRegistryProgram();\n      const provider = this.client.getProvider();\n      const targetOwner = owner || provider.wallet.publicKey;\n\n      const accounts = await (program.account as any).agentRegistryEntryV1.all([\n        {\n          memcmp: {\n            offset: 8 + 32, // discriminator + agentId offset\n            bytes: targetOwner.toBase58(),\n          },\n        },\n      ]);\n\n      return accounts.map(account =>  ({\n        publicKey: account.publicKey,\n        account: this.parseAgentAccount(account.account, account.publicKey),\n      }));\n    } catch (error) {\n      throw new AccountError(\n        `Failed to list agents: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n\n  /**\n   * List agents by status\n   */\n  async listAgentsByStatus(status: AgentStatus): Promise<ProgramAccount<AgentRegistryEntry>[]> {\n    try {\n      const program = this.client.getAgentRegistryProgram();\n\n      const accounts = await (program.account as any).agentRegistryEntryV1.all([\n        {\n          memcmp: {\n            offset: 8 + 64 + 128 + 512 + 32, // approximate offset to status field\n            bytes: Buffer.from([status]).toString('base64'),\n          },\n        },\n      ]);\n\n      return accounts.map(account =>  ({\n        publicKey: account.publicKey,\n        account: this.parseAgentAccount(account.account, account.publicKey),\n      }));\n    } catch (error) {\n      throw new AccountError(\n        `Failed to list agents by status: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n\n  /**\n   * Search agents by tags\n   */\n  async searchAgentsByTags(tags: string[]): Promise<ProgramAccount<AgentRegistryEntry>[]> {\n    try {\n      const program = this.client.getAgentRegistryProgram();\n      \n      // Get all agents (in a real implementation, this would be more efficient)\n      const allAgents = await (program.account as any).agentRegistryEntryV1.all();\n\n      // Filter by tags\n      const filteredAgents = allAgents.filter(account =>  {\n        const agent = this.parseAgentAccount(account.account, account.publicKey);\n        return tags.some(tag => agent.tags.includes(tag));\n      });\n\n      return filteredAgents.map(account =>  ({\n        publicKey: account.publicKey,\n        account: this.parseAgentAccount(account.account, account.publicKey),\n      }));\n    } catch (error) {\n      throw new AccountError(\n        `Failed to search agents by tags: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n\n  /**\n   * Stake tokens for an agent\n   */\n  async stakeForAgent(agentId: string, amount: A2AMPLAmount, tier: AgentTier): Promise<TransactionResult> {\n    Validator.validateAgentId(agentId);\n\n    if (amount < this.getMinStakeForTier(tier)) {\n      throw new ValidationError(`Stake amount too low for ${tier} tier`, 'amount');\n    }\n\n    try {\n      const stakingInstruction = await this.createStakingInstruction(\n        await this.getAgentPda(agentId),\n        amount,\n        tier\n      );\n\n      const transaction = new Transaction().add(stakingInstruction);\n      return await this.client.sendAndConfirmTransaction(transaction);\n    } catch (error) {\n      throw new RegistryError(\n        `Failed to stake for agent: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        undefined,\n        undefined,\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n\n  /**\n   * Get staking information for an agent\n   */\n  async getStakingInfo(agentId: string): Promise<StakingInfo | null> {\n    try {\n      // This would fetch from a staking account associated with the agent\n      // Implementation depends on the actual program structure\n      const agentPda = await this.getAgentPda(agentId);\n      \n      // Derive staking PDA\n      const program = this.client.getAgentRegistryProgram();\n      const [stakingPda] = PublicKey.findProgramAddressSync(\n        [\n          Buffer.from(CONSTANTS.STAKING_VAULT_SEED),\n          agentPda.toBuffer(),\n        ],\n        program.programId\n      );\n\n      // Check if staking account exists\n      if (!(await this.client.accountExists(stakingPda))) {\n        return null;\n      }\n\n      // This would be replaced with actual staking account parsing\n      return {\n        amount: 0n, // placeholder\n        tier: AgentTier.Bronze, // placeholder\n        lockPeriod: 0, // placeholder\n        lockEndSlot: 0n, // placeholder\n      };\n    } catch (error) {\n      return null;\n    }\n  }\n\n  /**\n   * Get agent PDA\n   */\n  private async getAgentPda(agentId: string): Promise<PublicKey> {\n    const program = this.client.getAgentRegistryProgram();\n    const provider = this.client.getProvider();\n\n    const [agentPda] = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(CONSTANTS.AGENT_REGISTRY_PDA_SEED),\n        Buffer.from(agentId),\n        provider.wallet.publicKey.toBuffer(),\n      ],\n      program.programId\n    );\n\n    return agentPda;\n  }\n\n  /**\n   * Parse agent account data\n   */\n  private parseAgentAccount(account: any, publicKey: PublicKey): AgentRegistryEntry {\n    // This would parse the actual account data structure\n    // For now, return a mock structure\n    return {\n      agentId: account.agentId || 'unknown',\n      name: account.name || 'Unknown Agent',\n      description: account.description || '',\n      version: account.version || '1.0.0',\n      status: account.status || AgentStatus.Pending,\n      owner: account.owner || PublicKey.default,\n      registrationSlot: BigInt(account.registrationSlot || 0),\n      lastUpdateSlot: BigInt(account.lastUpdateSlot || 0),\n      providerName: account.providerName || '',\n      providerUrl: account.providerUrl || '',\n      documentationUrl: account.documentationUrl,\n      serviceEndpoints: account.serviceEndpoints || [],\n      supportedModes: account.supportedModes || [],\n      skills: account.skills || [],\n      securityInfoUri: account.securityInfoUri,\n      aeaAddress: account.aeaAddress,\n      economicIntent: account.economicIntent,\n      extendedMetadataUri: account.extendedMetadataUri,\n      tags: account.tags || [],\n      stateVersion: BigInt(account.stateVersion || 0),\n    };\n  }\n\n  /**\n   * Create staking instruction\n   */\n  private async createStakingInstruction(\n    agentPda: PublicKey,\n    amount: A2AMPLAmount,\n    tier: AgentTier\n  ): Promise<any> {\n    // This would create the actual staking instruction\n    // Implementation depends on the program structure\n    throw new Error('Staking instruction creation not implemented');\n  }\n\n  /**\n   * Get staking amount for tier\n   */\n  private getStakingAmountForTier(tier: AgentTier): A2AMPLAmount {\n    switch (tier) {\n      case AgentTier.Bronze:\n        return CONSTANTS.BRONZE_TIER_STAKE;\n      case AgentTier.Silver:\n        return CONSTANTS.SILVER_TIER_STAKE;\n      case AgentTier.Gold:\n        return CONSTANTS.GOLD_TIER_STAKE;\n      case AgentTier.Platinum:\n        return CONSTANTS.PLATINUM_TIER_STAKE;\n      default:\n        throw new ValidationError(`Invalid tier: ${tier}`, 'tier');\n    }\n  }\n\n  /**\n   * Get minimum stake for tier\n   */\n  private getMinStakeForTier(tier: AgentTier): A2AMPLAmount {\n    return this.getStakingAmountForTier(tier);\n  }\n}","import { PublicKey, Transaction } from '@solana/web3.js';\nimport { SolanaClient } from './client.js';\nimport {\n  McpServerRegistrationData,\n  McpServerUpdateData,\n  McpServerRegistryEntry,\n  McpServerStatus,\n  TransactionResult,\n  ProgramAccount,\n  A2AMPLAmount,\n  CONSTANTS,\n} from './types.js';\nimport { Validator } from './utils/validation.js';\nimport { RegistryError, ValidationError, AccountError } from './errors.js';\n\n/**\n * MCP Server Registry API for managing Model Context Protocol servers\n */\nexport class McpAPI {\n  constructor(private client: SolanaClient) {}\n\n  /**\n   * Register a new MCP server\n   */\n  async registerServer(data: McpServerRegistrationData): Promise<TransactionResult> {\n    // Validate input data\n    Validator.validateMcpServerRegistrationData(data);\n\n    try {\n      const program = this.client.getMcpRegistryProgram();\n      const provider = this.client.getProvider();\n\n      // Derive PDA for server account\n      const [serverPda] = PublicKey.findProgramAddressSync(\n        [\n          Buffer.from(CONSTANTS.MCP_SERVER_REGISTRY_PDA_SEED),\n          Buffer.from(data.serverId),\n          provider.wallet.publicKey.toBuffer(),\n        ],\n        program.programId\n      );\n\n      // Check if server already exists\n      if (await this.client.accountExists(serverPda)) {\n        throw new RegistryError(`MCP server with ID '${data.serverId}' already exists`);\n      }\n\n      // Calculate registration fee\n      const registrationFee = CONSTANTS.MCP_REGISTRATION_FEE;\n\n      // Build registration instruction\n      const registerInstruction = await program.methods\n        .registerServer({\n          serverId: data.serverId,\n          name: data.name,\n          version: data.version,\n          endpointUrl: data.endpointUrl,\n          capabilitiesSummary: data.capabilitiesSummary,\n          onchainToolDefinitions: data.onchainToolDefinitions,\n          onchainResourceDefinitions: data.onchainResourceDefinitions,\n          onchainPromptDefinitions: data.onchainPromptDefinitions,\n          fullCapabilitiesUri: data.fullCapabilitiesUri,\n          documentationUrl: data.documentationUrl,\n          tags: data.tags,\n        })\n        .accounts({\n          serverAccount: serverPda,\n          owner: provider.wallet.publicKey,\n          systemProgram: PublicKey.default, // SystemProgram.programId\n        })\n        .instruction();\n\n      const transaction = new Transaction().add(registerInstruction);\n      return await this.client.sendAndConfirmTransaction(transaction);\n    } catch (error) {\n      throw new RegistryError(\n        `Failed to register MCP server: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        undefined,\n        undefined,\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n\n  /**\n   * Update an existing MCP server\n   */\n  async updateServer(serverId: string, data: McpServerUpdateData): Promise<TransactionResult> {\n    // Validate inputs\n    Validator.validateServerId(serverId);\n    Validator.validateMcpServerUpdateData(data);\n\n    try {\n      const program = this.client.getMcpRegistryProgram();\n      const provider = this.client.getProvider();\n\n      // Derive PDA for server account\n      const [serverPda] = PublicKey.findProgramAddressSync(\n        [\n          Buffer.from(CONSTANTS.MCP_SERVER_REGISTRY_PDA_SEED),\n          Buffer.from(serverId),\n          provider.wallet.publicKey.toBuffer(),\n        ],\n        program.programId\n      );\n\n      // Check if server exists\n      if (!(await this.client.accountExists(serverPda))) {\n        throw new RegistryError(`MCP server with ID '${serverId}' not found`);\n      }\n\n      // Get current server data for version checking\n      const currentServer = await this.getServer(serverId);\n\n      // Build update instruction\n      const updateInstruction = await program.methods\n        .updateServer({\n          name: data.name,\n          version: data.version,\n          endpointUrl: data.endpointUrl,\n          capabilitiesSummary: data.capabilitiesSummary,\n          onchainToolDefinitions: data.onchainToolDefinitions,\n          onchainResourceDefinitions: data.onchainResourceDefinitions,\n          onchainPromptDefinitions: data.onchainPromptDefinitions,\n          fullCapabilitiesUri: data.fullCapabilitiesUri,\n          documentationUrl: data.documentationUrl,\n          tags: data.tags,\n          expectedStateVersion: currentServer.stateVersion,\n        })\n        .accounts({\n          serverAccount: serverPda,\n          owner: provider.wallet.publicKey,\n        })\n        .instruction();\n\n      const transaction = new Transaction().add(updateInstruction);\n      return await this.client.sendAndConfirmTransaction(transaction);\n    } catch (error) {\n      throw new RegistryError(\n        `Failed to update MCP server: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        undefined,\n        undefined,\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n\n  /**\n   * Deregister an MCP server\n   */\n  async deregisterServer(serverId: string): Promise<TransactionResult> {\n    Validator.validateServerId(serverId);\n\n    try {\n      const program = this.client.getMcpRegistryProgram();\n      const provider = this.client.getProvider();\n\n      // Derive PDA for server account\n      const [serverPda] = PublicKey.findProgramAddressSync(\n        [\n          Buffer.from(CONSTANTS.MCP_SERVER_REGISTRY_PDA_SEED),\n          Buffer.from(serverId),\n          provider.wallet.publicKey.toBuffer(),\n        ],\n        program.programId\n      );\n\n      // Check if server exists\n      if (!(await this.client.accountExists(serverPda))) {\n        throw new RegistryError(`MCP server with ID '${serverId}' not found`);\n      }\n\n      const deregisterInstruction = await program.methods\n        .deregisterServer()\n        .accounts({\n          serverAccount: serverPda,\n          owner: provider.wallet.publicKey,\n        })\n        .instruction();\n\n      const transaction = new Transaction().add(deregisterInstruction);\n      return await this.client.sendAndConfirmTransaction(transaction);\n    } catch (error) {\n      throw new RegistryError(\n        `Failed to deregister MCP server: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        undefined,\n        undefined,\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n\n  /**\n   * Get MCP server by ID\n   */\n  async getServer(serverId: string): Promise<McpServerRegistryEntry> {\n    Validator.validateServerId(serverId);\n\n    try {\n      const program = this.client.getMcpRegistryProgram();\n      const provider = this.client.getProvider();\n\n      // Derive PDA for server account\n      const [serverPda] = PublicKey.findProgramAddressSync(\n        [\n          Buffer.from(CONSTANTS.MCP_SERVER_REGISTRY_PDA_SEED),\n          Buffer.from(serverId),\n          provider.wallet.publicKey.toBuffer(),\n        ],\n        program.programId\n      );\n\n      const account = await (program.account as any).mcpServerRegistryEntryV1.fetch(serverPda);\n      \n      return this.parseServerAccount(account, serverPda);\n    } catch (error) {\n      throw new AccountError(\n        `Failed to get MCP server '${serverId}': ${error instanceof Error ? error.message : 'Server not found'}`,\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n\n  /**\n   * List MCP servers by owner\n   */\n  async listServersByOwner(owner?: PublicKey): Promise<ProgramAccount<McpServerRegistryEntry>[]> {\n    try {\n      const program = this.client.getMcpRegistryProgram();\n      const provider = this.client.getProvider();\n      const targetOwner = owner || provider.wallet.publicKey;\n\n      const accounts = await (program.account as any).mcpServerRegistryEntryV1.all([\n        {\n          memcmp: {\n            offset: 8 + 32, // discriminator + serverId offset\n            bytes: targetOwner.toBase58(),\n          },\n        },\n      ]);\n\n      return accounts.map(account =>  ({\n        publicKey: account.publicKey,\n        account: this.parseServerAccount(account.account, account.publicKey),\n      }));\n    } catch (error) {\n      throw new AccountError(\n        `Failed to list MCP servers: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n\n  /**\n   * List MCP servers by status\n   */\n  async listServersByStatus(status: McpServerStatus): Promise<ProgramAccount<McpServerRegistryEntry>[]> {\n    try {\n      const program = this.client.getMcpRegistryProgram();\n\n      const accounts = await (program.account as any).mcpServerRegistryEntryV1.all([\n        {\n          memcmp: {\n            offset: 8 + 64 + 128 + 32, // approximate offset to status field\n            bytes: Buffer.from([status]).toString('base64'),\n          },\n        },\n      ]);\n\n      return accounts.map(account =>  ({\n        publicKey: account.publicKey,\n        account: this.parseServerAccount(account.account, account.publicKey),\n      }));\n    } catch (error) {\n      throw new AccountError(\n        `Failed to list MCP servers by status: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n\n  /**\n   * Search MCP servers by capabilities\n   */\n  async searchServersByCapabilities(keywords: string[]): Promise<ProgramAccount<McpServerRegistryEntry>[]> {\n    try {\n      const program = this.client.getMcpRegistryProgram();\n      \n      // Get all servers (in a real implementation, this would be more efficient)\n      const allServers = await (program.account as any).mcpServerRegistryEntryV1.all();\n\n      // Filter by capabilities keywords\n      const filteredServers = allServers.filter(account =>  {\n        const server = this.parseServerAccount(account.account, account.publicKey);\n        const searchText = `${server.capabilitiesSummary} ${server.tags.join(' ')}`.toLowerCase();\n        return keywords.some(keyword => searchText.includes(keyword.toLowerCase()));\n      });\n\n      return filteredServers.map(account =>  ({\n        publicKey: account.publicKey,\n        account: this.parseServerAccount(account.account, account.publicKey),\n      }));\n    } catch (error) {\n      throw new AccountError(\n        `Failed to search MCP servers by capabilities: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n\n  /**\n   * Search MCP servers by tags\n   */\n  async searchServersByTags(tags: string[]): Promise<ProgramAccount<McpServerRegistryEntry>[]> {\n    try {\n      const program = this.client.getMcpRegistryProgram();\n      \n      // Get all servers (in a real implementation, this would be more efficient)\n      const allServers = await (program.account as any).mcpServerRegistryEntryV1.all();\n\n      // Filter by tags\n      const filteredServers = allServers.filter(account =>  {\n        const server = this.parseServerAccount(account.account, account.publicKey);\n        return tags.some(tag => server.tags.includes(tag));\n      });\n\n      return filteredServers.map(account =>  ({\n        publicKey: account.publicKey,\n        account: this.parseServerAccount(account.account, account.publicKey),\n      }));\n    } catch (error) {\n      throw new AccountError(\n        `Failed to search MCP servers by tags: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n\n  /**\n   * Get servers that provide specific tools\n   */\n  async getServersByTool(toolName: string): Promise<ProgramAccount<McpServerRegistryEntry>[]> {\n    try {\n      const program = this.client.getMcpRegistryProgram();\n      \n      // Get all servers\n      const allServers = await (program.account as any).mcpServerRegistryEntryV1.all();\n\n      // Filter by tool definitions\n      const filteredServers = allServers.filter(account =>  {\n        const server = this.parseServerAccount(account.account, account.publicKey);\n        return server.onchainToolDefinitions.some(tool => \n          tool.name.toLowerCase().includes(toolName.toLowerCase())\n        );\n      });\n\n      return filteredServers.map(account =>  ({\n        publicKey: account.publicKey,\n        account: this.parseServerAccount(account.account, account.publicKey),\n      }));\n    } catch (error) {\n      throw new AccountError(\n        `Failed to get servers by tool: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n\n  /**\n   * Get servers that provide specific resources\n   */\n  async getServersByResource(resourcePattern: string): Promise<ProgramAccount<McpServerRegistryEntry>[]> {\n    try {\n      const program = this.client.getMcpRegistryProgram();\n      \n      // Get all servers\n      const allServers = await (program.account as any).mcpServerRegistryEntryV1.all();\n\n      // Filter by resource definitions\n      const filteredServers = allServers.filter(account =>  {\n        const server = this.parseServerAccount(account.account, account.publicKey);\n        return server.onchainResourceDefinitions.some(resource => \n          resource.uriPattern.toLowerCase().includes(resourcePattern.toLowerCase())\n        );\n      });\n\n      return filteredServers.map(account =>  ({\n        publicKey: account.publicKey,\n        account: this.parseServerAccount(account.account, account.publicKey),\n      }));\n    } catch (error) {\n      throw new AccountError(\n        `Failed to get servers by resource: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n\n  /**\n   * Get servers that provide specific prompts\n   */\n  async getServersByPrompt(promptName: string): Promise<ProgramAccount<McpServerRegistryEntry>[]> {\n    try {\n      const program = this.client.getMcpRegistryProgram();\n      \n      // Get all servers\n      const allServers = await (program.account as any).mcpServerRegistryEntryV1.all();\n\n      // Filter by prompt definitions\n      const filteredServers = allServers.filter(account =>  {\n        const server = this.parseServerAccount(account.account, account.publicKey);\n        return server.onchainPromptDefinitions.some(prompt => \n          prompt.name.toLowerCase().includes(promptName.toLowerCase())\n        );\n      });\n\n      return filteredServers.map(account =>  ({\n        publicKey: account.publicKey,\n        account: this.parseServerAccount(account.account, account.publicKey),\n      }));\n    } catch (error) {\n      throw new AccountError(\n        `Failed to get servers by prompt: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n\n  /**\n   * Update server status (admin function)\n   */\n  async updateServerStatus(serverId: string, status: McpServerStatus): Promise<TransactionResult> {\n    Validator.validateServerId(serverId);\n\n    try {\n      const program = this.client.getMcpRegistryProgram();\n      const provider = this.client.getProvider();\n\n      // Derive PDA for server account\n      const [serverPda] = PublicKey.findProgramAddressSync(\n        [\n          Buffer.from(CONSTANTS.MCP_SERVER_REGISTRY_PDA_SEED),\n          Buffer.from(serverId),\n          provider.wallet.publicKey.toBuffer(),\n        ],\n        program.programId\n      );\n\n      const updateStatusInstruction = await program.methods\n        .updateServerStatus(status)\n        .accounts({\n          serverAccount: serverPda,\n          authority: provider.wallet.publicKey, // Assuming authority check\n        })\n        .instruction();\n\n      const transaction = new Transaction().add(updateStatusInstruction);\n      return await this.client.sendAndConfirmTransaction(transaction);\n    } catch (error) {\n      throw new RegistryError(\n        `Failed to update server status: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        undefined,\n        undefined,\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n\n  /**\n   * Get server PDA\n   */\n  private async getServerPda(serverId: string): Promise<PublicKey> {\n    const program = this.client.getMcpRegistryProgram();\n    const provider = this.client.getProvider();\n\n    const [serverPda] = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(CONSTANTS.MCP_SERVER_REGISTRY_PDA_SEED),\n        Buffer.from(serverId),\n        provider.wallet.publicKey.toBuffer(),\n      ],\n      program.programId\n    );\n\n    return serverPda;\n  }\n\n  /**\n   * Parse server account data\n   */\n  private parseServerAccount(account: any, publicKey: PublicKey): McpServerRegistryEntry {\n    // This would parse the actual account data structure\n    // For now, return a mock structure\n    return {\n      serverId: account.serverId || 'unknown',\n      name: account.name || 'Unknown Server',\n      version: account.version || '1.0.0',\n      status: account.status || McpServerStatus.Pending,\n      owner: account.owner || PublicKey.default,\n      registrationSlot: BigInt(account.registrationSlot || 0),\n      lastUpdateSlot: BigInt(account.lastUpdateSlot || 0),\n      endpointUrl: account.endpointUrl || '',\n      capabilitiesSummary: account.capabilitiesSummary || '',\n      onchainToolDefinitions: account.onchainToolDefinitions || [],\n      onchainResourceDefinitions: account.onchainResourceDefinitions || [],\n      onchainPromptDefinitions: account.onchainPromptDefinitions || [],\n      fullCapabilitiesUri: account.fullCapabilitiesUri,\n      documentationUrl: account.documentationUrl,\n      tags: account.tags || [],\n      stateVersion: BigInt(account.stateVersion || 0),\n    };\n  }\n}","import { PublicKey, Transaction } from '@solana/web3.js';\nimport {\n  getAssociatedTokenAddress,\n  createTransferInstruction,\n  TOKEN_PROGRAM_ID,\n} from '@solana/spl-token';\nimport { SolanaClient } from '../client.js';\nimport { PrepaymentConfig, TransactionResult, A2AMPLAmount, TOKEN_MINTS } from '../types.js';\nimport { PaymentError, ValidationError } from '../errors.js';\nimport { Validator } from '../utils/validation.js';\n\n/**\n * Handles prepayment flows for services\n */\nexport class PrepaymentFlow {\n  constructor(private _client: SolanaClient) {}\n\n  /**\n   * Create a prepayment transaction\n   */\n  async createPrepayment(config: PrepaymentConfig): Promise<Transaction> {\n    // Validate inputs\n    this.validatePrepaymentConfig(config);\n\n    try {\n      const transaction = new Transaction();\n      const payer = config.payer;\n      const recipient = config.recipient;\n      const amount = config.amount;\n\n      // Get token mint for the cluster\n      const tokenMint = TOKEN_MINTS[this._client.cluster === 'mainnet-beta' ? 'mainnet' : 'devnet'];\n\n      // Get associated token accounts\n      const payerTokenAccount = await getAssociatedTokenAddress(\n        tokenMint,\n        payer,\n        false,\n        TOKEN_PROGRAM_ID\n      );\n\n      const recipientTokenAccount = await getAssociatedTokenAddress(\n        tokenMint,\n        recipient,\n        false,\n        TOKEN_PROGRAM_ID\n      );\n\n      // Check if payer token account exists and has sufficient balance\n      await this.validatePayerBalance(payerTokenAccount, amount);\n\n      // Check if recipient token account exists, create if needed\n      await this.ensureRecipientTokenAccount(\n        transaction,\n        recipient,\n        recipientTokenAccount,\n        tokenMint\n      );\n\n      // Create transfer instruction\n      const transferInstruction = createTransferInstruction(\n        payerTokenAccount,\n        recipientTokenAccount,\n        payer,\n        amount,\n        [],\n        TOKEN_PROGRAM_ID\n      );\n\n      transaction.add(transferInstruction);\n\n      // Set recent blockhash and fee payer\n      const { blockhash } = await this._client.connection.getLatestBlockhash();\n      transaction.recentBlockhash = blockhash;\n      transaction.feePayer = payer;\n\n      return transaction;\n    } catch (error) {\n      throw new PaymentError(\n        `Failed to create prepayment transaction: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n\n  /**\n   * Execute prepayment\n   */\n  async executePrepayment(config: PrepaymentConfig): Promise<TransactionResult> {\n    try {\n      const transaction = await this.createPrepayment(config);\n      return await this._client.sendAndConfirmTransaction(transaction);\n    } catch (error) {\n      throw new PaymentError(\n        `Failed to execute prepayment: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n\n  /**\n   * Get prepayment status\n   */\n  async getPrepaymentStatus(signature: string): Promise<{\n    confirmed: boolean;\n    slot?: bigint;\n    amount?: A2AMPLAmount;\n    payer?: PublicKey;\n    recipient?: PublicKey;\n  }> {\n    try {\n      const transaction = await this._client.connection.getTransaction(signature, {\n        commitment: 'confirmed',\n        maxSupportedTransactionVersion: 0,\n      });\n\n      if (!transaction) {\n        return { confirmed: false };\n      }\n\n      // Parse transaction to extract payment details\n      // This would require more sophisticated parsing in a real implementation\n      return {\n        confirmed: true,\n        slot: BigInt(transaction.slot),\n        // Additional parsing would be needed to extract amount, payer, recipient\n      };\n    } catch (error) {\n      throw new PaymentError(\n        `Failed to get prepayment status: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n\n  /**\n   * Estimate prepayment cost (including network fees)\n   */\n  async estimatePrepaymentCost(config: PrepaymentConfig): Promise<{\n    paymentAmount: A2AMPLAmount;\n    networkFee: bigint; // in lamports\n    totalCost: A2AMPLAmount;\n  }> {\n    try {\n      // Create the transaction to estimate fees\n      const transaction = await this.createPrepayment(config);\n\n      // Get fee estimate\n      const feeEstimate = await this._client.connection.getFeeForMessage(\n        transaction.compileMessage(),\n        'confirmed'\n      );\n\n      const networkFee = BigInt(feeEstimate.value || 5000); // Default 5000 lamports if estimation fails\n\n      return {\n        paymentAmount: config.amount,\n        networkFee,\n        totalCost: config.amount, // Token amount doesn't include SOL fees\n      };\n    } catch (error) {\n      throw new PaymentError(\n        `Failed to estimate prepayment cost: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n\n  /**\n   * Validate prepayment configuration\n   */\n  private validatePrepaymentConfig(config: PrepaymentConfig): void {\n    Validator.validatePublicKey(config.payer, 'payer');\n    Validator.validatePublicKey(config.recipient, 'recipient');\n\n    if (config.amount <= 0n) {\n      throw new ValidationError('Payment amount must be greater than 0', 'amount');\n    }\n\n    if (config.payer.equals(config.recipient)) {\n      throw new ValidationError('Payer and recipient cannot be the same', 'recipient');\n    }\n  }\n\n  /**\n   * Validate payer has sufficient balance\n   */\n  private async validatePayerBalance(\n    payerTokenAccount: PublicKey,\n    _amount: A2AMPLAmount\n  ): Promise<void> {\n    try {\n      const accountInfo = await this._client.getAccountInfo(payerTokenAccount);\n\n      if (!accountInfo) {\n        throw new PaymentError('Payer token account does not exist');\n      }\n\n      // Parse token account data to get balance\n      // This would require proper SPL token account parsing\n      // For now, we'll assume the account exists and has sufficient balance\n      // In a real implementation, you'd parse the account data properly\n    } catch (error) {\n      throw new PaymentError(\n        `Failed to validate payer balance: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n\n  /**\n   * Ensure recipient token account exists\n   */\n  private async ensureRecipientTokenAccount(\n    transaction: Transaction,\n    recipient: PublicKey,\n    recipientTokenAccount: PublicKey,\n    tokenMint: PublicKey\n  ): Promise<void> {\n    try {\n      const accountExists = await this._client.accountExists(recipientTokenAccount);\n\n      if (!accountExists) {\n        // Add instruction to create associated token account\n        const { createAssociatedTokenAccountInstruction } = await import('@solana/spl-token');\n\n        const createAtaInstruction = createAssociatedTokenAccountInstruction(\n          recipient, // payer of the creation fee\n          recipientTokenAccount,\n          recipient,\n          tokenMint,\n          TOKEN_PROGRAM_ID\n        );\n\n        transaction.add(createAtaInstruction);\n      }\n    } catch (error) {\n      throw new PaymentError(\n        `Failed to ensure recipient token account: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n}\n","import { PublicKey, Transaction } from '@solana/web3.js';\nimport {\n  getAssociatedTokenAddress,\n  createTransferInstruction,\n  TOKEN_PROGRAM_ID,\n} from '@solana/spl-token';\nimport { SolanaClient } from '../client.js';\nimport { PayAsYouGoConfig, TransactionResult, A2AMPLAmount, TOKEN_MINTS } from '../types.js';\nimport { PaymentError, ValidationError } from '../errors.js';\nimport { Validator } from '../utils/validation.js';\n\n/**\n * Usage tracking for pay-as-you-go billing\n */\nexport interface UsageRecord {\n  timestamp: number;\n  serviceId: string;\n  userId: PublicKey;\n  amount: A2AMPLAmount;\n  metadata?: Record<string, unknown>;\n}\n\n/**\n * Handles pay-as-you-go payment flows\n */\nexport class PayAsYouGoFlow {\n  private usageRecords: Map<string, UsageRecord[]> = new Map();\n\n  constructor(private _client: SolanaClient) {}\n\n  /**\n   * Record usage for billing\n   */\n  recordUsage(\n    serviceId: string,\n    userId: PublicKey,\n    amount: A2AMPLAmount,\n    metadata?: Record<string, unknown>\n  ): void {\n    const record: UsageRecord = {\n      timestamp: Date.now(),\n      serviceId,\n      userId,\n      amount,\n      metadata: metadata ?? {},\n    };\n\n    const existing = this.usageRecords.get(serviceId) || [];\n    existing.push(record);\n    this.usageRecords.set(serviceId, existing);\n  }\n\n  /**\n   * Get usage records for a service\n   */\n  getUsageRecords(serviceId: string, fromTimestamp?: number): UsageRecord[] {\n    const records = this.usageRecords.get(serviceId) || [];\n\n    if (fromTimestamp) {\n      return records.filter(record => record.timestamp >= fromTimestamp);\n    }\n\n    return records;\n  }\n\n  /**\n   * Calculate total usage cost\n   */\n  calculateUsageCost(serviceId: string, fromTimestamp?: number): A2AMPLAmount {\n    const records = this.getUsageRecords(serviceId, fromTimestamp);\n    return records.reduce((total, record) => total + record.amount, 0n);\n  }\n\n  /**\n   * Create payment transaction for accumulated usage\n   */\n  async createUsagePayment(\n    config: PayAsYouGoConfig,\n    serviceId: string,\n    fromTimestamp?: number\n  ): Promise<{ transaction: Transaction; totalAmount: A2AMPLAmount; usageCount: number }> {\n    // Validate inputs\n    this.validatePayAsYouGoConfig(config);\n\n    try {\n      const totalAmount = this.calculateUsageCost(serviceId, fromTimestamp);\n      const usageRecords = this.getUsageRecords(serviceId, fromTimestamp);\n\n      if (totalAmount === 0n) {\n        throw new PaymentError('No usage to bill for the specified period');\n      }\n\n      const transaction = new Transaction();\n      const payer = config.payer;\n      const recipient = config.recipient;\n\n      // Get token mint for the cluster\n      const tokenMint = TOKEN_MINTS[this._client.cluster === 'mainnet-beta' ? 'mainnet' : 'devnet'];\n\n      // Get associated token accounts\n      const payerTokenAccount = await getAssociatedTokenAddress(\n        tokenMint,\n        payer,\n        false,\n        TOKEN_PROGRAM_ID\n      );\n\n      const recipientTokenAccount = await getAssociatedTokenAddress(\n        tokenMint,\n        recipient,\n        false,\n        TOKEN_PROGRAM_ID\n      );\n\n      // Check if payer token account exists and has sufficient balance\n      await this.validatePayerBalance(payerTokenAccount, totalAmount);\n\n      // Check if recipient token account exists, create if needed\n      await this.ensureRecipientTokenAccount(\n        transaction,\n        recipient,\n        recipientTokenAccount,\n        tokenMint\n      );\n\n      // Create transfer instruction\n      const transferInstruction = createTransferInstruction(\n        payerTokenAccount,\n        recipientTokenAccount,\n        payer,\n        totalAmount,\n        [],\n        TOKEN_PROGRAM_ID\n      );\n\n      transaction.add(transferInstruction);\n\n      // Set recent blockhash and fee payer\n      const { blockhash } = await this._client.connection.getLatestBlockhash();\n      transaction.recentBlockhash = blockhash;\n      transaction.feePayer = payer;\n\n      return {\n        transaction,\n        totalAmount,\n        usageCount: usageRecords.length,\n      };\n    } catch (error) {\n      throw new PaymentError(\n        `Failed to create usage payment transaction: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n\n  /**\n   * Execute payment for accumulated usage\n   */\n  async executeUsagePayment(\n    config: PayAsYouGoConfig,\n    serviceId: string,\n    fromTimestamp?: number\n  ): Promise<{ result: TransactionResult; totalAmount: A2AMPLAmount; usageCount: number }> {\n    try {\n      const { transaction, totalAmount, usageCount } = await this.createUsagePayment(\n        config,\n        serviceId,\n        fromTimestamp\n      );\n\n      const result = await this._client.sendAndConfirmTransaction(transaction);\n\n      // Clear paid usage records\n      this.clearPaidUsage(serviceId, fromTimestamp);\n\n      return { result, totalAmount, usageCount };\n    } catch (error) {\n      throw new PaymentError(\n        `Failed to execute usage payment: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n\n  /**\n   * Create instant payment for single use\n   */\n  async createInstantPayment(config: PayAsYouGoConfig): Promise<Transaction> {\n    // Validate inputs\n    this.validatePayAsYouGoConfig(config);\n\n    try {\n      const transaction = new Transaction();\n      const payer = config.payer;\n      const recipient = config.recipient;\n      const amount = config.perUsePrice;\n\n      // Get token mint for the cluster\n      const tokenMint = TOKEN_MINTS[this._client.cluster === 'mainnet-beta' ? 'mainnet' : 'devnet'];\n\n      // Get associated token accounts\n      const payerTokenAccount = await getAssociatedTokenAddress(\n        tokenMint,\n        payer,\n        false,\n        TOKEN_PROGRAM_ID\n      );\n\n      const recipientTokenAccount = await getAssociatedTokenAddress(\n        tokenMint,\n        recipient,\n        false,\n        TOKEN_PROGRAM_ID\n      );\n\n      // Check if payer token account exists and has sufficient balance\n      await this.validatePayerBalance(payerTokenAccount, amount);\n\n      // Check if recipient token account exists, create if needed\n      await this.ensureRecipientTokenAccount(\n        transaction,\n        recipient,\n        recipientTokenAccount,\n        tokenMint\n      );\n\n      // Create transfer instruction\n      const transferInstruction = createTransferInstruction(\n        payerTokenAccount,\n        recipientTokenAccount,\n        payer,\n        amount,\n        [],\n        TOKEN_PROGRAM_ID\n      );\n\n      transaction.add(transferInstruction);\n\n      // Set recent blockhash and fee payer\n      const { blockhash } = await this._client.connection.getLatestBlockhash();\n      transaction.recentBlockhash = blockhash;\n      transaction.feePayer = payer;\n\n      return transaction;\n    } catch (error) {\n      throw new PaymentError(\n        `Failed to create instant payment transaction: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n\n  /**\n   * Execute instant payment for single use\n   */\n  async executeInstantPayment(config: PayAsYouGoConfig): Promise<TransactionResult> {\n    try {\n      const transaction = await this.createInstantPayment(config);\n      return await this._client.sendAndConfirmTransaction(transaction);\n    } catch (error) {\n      throw new PaymentError(\n        `Failed to execute instant payment: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n\n  /**\n   * Get usage summary for a service\n   */\n  getUsageSummary(\n    serviceId: string,\n    fromTimestamp?: number\n  ): {\n    totalCost: A2AMPLAmount;\n    usageCount: number;\n    averageCost: A2AMPLAmount;\n    firstUsage?: number;\n    lastUsage?: number;\n  } {\n    const records = this.getUsageRecords(serviceId, fromTimestamp);\n\n    if (records.length === 0) {\n      return {\n        totalCost: 0n,\n        usageCount: 0,\n        averageCost: 0n,\n      };\n    }\n\n    const totalCost = records.reduce((total, record) => total + record.amount, 0n);\n    const averageCost = totalCost / BigInt(records.length);\n\n    return {\n      totalCost,\n      usageCount: records.length,\n      averageCost,\n      firstUsage: Math.min(...records.map(r => r.timestamp)),\n      lastUsage: Math.max(...records.map(r => r.timestamp)),\n    };\n  }\n\n  /**\n   * Clear all usage records\n   */\n  clearAllUsage(): void {\n    this.usageRecords.clear();\n  }\n\n  /**\n   * Clear paid usage records\n   */\n  private clearPaidUsage(serviceId: string, fromTimestamp?: number): void {\n    if (!fromTimestamp) {\n      this.usageRecords.delete(serviceId);\n      return;\n    }\n\n    const records = this.usageRecords.get(serviceId) || [];\n    const remainingRecords = records.filter(record => record.timestamp < fromTimestamp);\n\n    if (remainingRecords.length === 0) {\n      this.usageRecords.delete(serviceId);\n    } else {\n      this.usageRecords.set(serviceId, remainingRecords);\n    }\n  }\n\n  /**\n   * Validate pay-as-you-go configuration\n   */\n  private validatePayAsYouGoConfig(config: PayAsYouGoConfig): void {\n    Validator.validatePublicKey(config.payer, 'payer');\n    Validator.validatePublicKey(config.recipient, 'recipient');\n\n    if (config.perUsePrice <= 0n) {\n      throw new ValidationError('Per-use price must be greater than 0', 'perUsePrice');\n    }\n\n    if (config.payer.equals(config.recipient)) {\n      throw new ValidationError('Payer and recipient cannot be the same', 'recipient');\n    }\n  }\n\n  /**\n   * Validate payer has sufficient balance\n   */\n  private async validatePayerBalance(\n    payerTokenAccount: PublicKey,\n    _amount: A2AMPLAmount\n  ): Promise<void> {\n    try {\n      const accountInfo = await this._client.getAccountInfo(payerTokenAccount);\n\n      if (!accountInfo) {\n        throw new PaymentError('Payer token account does not exist');\n      }\n\n      // Parse token account data to get balance\n      // This would require proper SPL token account parsing\n      // For now, we'll assume the account exists and has sufficient balance\n    } catch (error) {\n      throw new PaymentError(\n        `Failed to validate payer balance: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n\n  /**\n   * Ensure recipient token account exists\n   */\n  private async ensureRecipientTokenAccount(\n    transaction: Transaction,\n    recipient: PublicKey,\n    recipientTokenAccount: PublicKey,\n    tokenMint: PublicKey\n  ): Promise<void> {\n    try {\n      const accountExists = await this._client.accountExists(recipientTokenAccount);\n\n      if (!accountExists) {\n        // Add instruction to create associated token account\n        const { createAssociatedTokenAccountInstruction } = await import('@solana/spl-token');\n\n        const createAtaInstruction = createAssociatedTokenAccountInstruction(\n          recipient, // payer of the creation fee\n          recipientTokenAccount,\n          recipient,\n          tokenMint,\n          TOKEN_PROGRAM_ID\n        );\n\n        transaction.add(createAtaInstruction);\n      }\n    } catch (error) {\n      throw new PaymentError(\n        `Failed to ensure recipient token account: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n}\n","import { PublicKey, Transaction } from '@solana/web3.js';\nimport {\n  getAssociatedTokenAddress,\n  createTransferInstruction,\n  TOKEN_PROGRAM_ID,\n} from '@solana/spl-token';\nimport { SolanaClient } from '../client.js';\nimport {\n  StreamConfig,\n  TransactionResult,\n  A2AMPLAmount,\n  TOKEN_MINTS,\n  PaymentMethod,\n} from '../types.js';\nimport { PaymentError, ValidationError } from '../errors.js';\nimport { Validator } from '../utils/validation.js';\n\n/**\n * Stream payment state\n */\nexport interface StreamState {\n  id: string;\n  payer: PublicKey;\n  recipient: PublicKey;\n  ratePerSecond: A2AMPLAmount;\n  totalAmount: A2AMPLAmount;\n  startTime: number;\n  endTime: number;\n  amountPaid: A2AMPLAmount;\n  lastPaymentTime: number;\n  active: boolean;\n}\n\n/**\n * Handles streaming payment flows\n */\nexport class StreamPaymentFlow {\n  private streams: Map<string, StreamState> = new Map();\n  private timers: Map<string, any> = new Map();\n\n  constructor(private _client: SolanaClient) {}\n\n  /**\n   * Create a new payment stream\n   */\n  async createStream(\n    config: StreamConfig\n  ): Promise<{ streamId: string; initialTransaction: Transaction }> {\n    // Validate inputs\n    this.validateStreamConfig(config);\n\n    const streamId = this.generateStreamId();\n    const startTime = Date.now();\n    const endTime = startTime + config.duration * 1000;\n    const totalAmount = config.ratePerSecond * BigInt(config.duration);\n\n    try {\n      // Create initial payment transaction\n      const transaction = await this.createPaymentTransaction(config, totalAmount);\n\n      // Create stream state\n      const streamState: StreamState = {\n        id: streamId,\n        payer: config.payer,\n        recipient: config.recipient,\n        ratePerSecond: config.ratePerSecond,\n        totalAmount,\n        startTime,\n        endTime,\n        amountPaid: 0n,\n        lastPaymentTime: startTime,\n        active: false,\n      };\n\n      this.streams.set(streamId, streamState);\n\n      return { streamId, initialTransaction: transaction };\n    } catch (error) {\n      throw new PaymentError(\n        `Failed to create payment stream: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n\n  /**\n   * Start a payment stream\n   */\n  async startStream(streamId: string): Promise<TransactionResult> {\n    const stream = this.streams.get(streamId);\n    if (!stream) {\n      throw new PaymentError(`Stream not found: ${streamId}`);\n    }\n\n    if (stream.active) {\n      throw new PaymentError(`Stream already active: ${streamId}`);\n    }\n\n    try {\n      // Execute initial payment\n      const transaction = await this.createPaymentTransaction(\n        {\n          method: PaymentMethod.Stream,\n          payer: stream.payer,\n          recipient: stream.recipient,\n          ratePerSecond: stream.ratePerSecond,\n          duration: (stream.endTime - stream.startTime) / 1000,\n          pricing: { basePrice: stream.totalAmount, currency: 'A2AMPL' },\n        },\n        stream.totalAmount\n      );\n\n      const result = await this._client.sendAndConfirmTransaction(transaction);\n\n      // Mark stream as active\n      stream.active = true;\n      stream.amountPaid = stream.totalAmount;\n      stream.lastPaymentTime = Date.now();\n\n      // Set up automatic stream monitoring\n      this.startStreamMonitoring(streamId);\n\n      return result;\n    } catch (error) {\n      throw new PaymentError(\n        `Failed to start payment stream: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n\n  /**\n   * Stop a payment stream\n   */\n  async stopStream(\n    streamId: string\n  ): Promise<{ refund?: TransactionResult; finalAmount: A2AMPLAmount }> {\n    const stream = this.streams.get(streamId);\n    if (!stream) {\n      throw new PaymentError(`Stream not found: ${streamId}`);\n    }\n\n    if (!stream.active) {\n      throw new PaymentError(`Stream not active: ${streamId}`);\n    }\n\n    try {\n      const currentTime = Date.now();\n      const elapsedTime = Math.min(\n        currentTime - stream.startTime,\n        stream.endTime - stream.startTime\n      );\n      const actualAmount = stream.ratePerSecond * BigInt(Math.floor(elapsedTime / 1000));\n      const refundAmount = stream.totalAmount - actualAmount;\n\n      // Stop monitoring\n      this.stopStreamMonitoring(streamId);\n\n      // Mark stream as inactive\n      stream.active = false;\n\n      let refundResult: TransactionResult | undefined;\n\n      // Create refund transaction if there's excess payment\n      if (refundAmount > 0n) {\n        const refundTransaction = await this.createRefundTransaction(stream, refundAmount);\n        refundResult = await this._client.sendAndConfirmTransaction(refundTransaction);\n      }\n\n      return {\n        refund: refundResult ?? undefined,\n        finalAmount: actualAmount,\n      };\n    } catch (error) {\n      throw new PaymentError(\n        `Failed to stop payment stream: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n\n  /**\n   * Get stream status\n   */\n  getStreamStatus(streamId: string): StreamState & {\n    currentAmount: A2AMPLAmount;\n    remainingAmount: A2AMPLAmount;\n    elapsedTime: number;\n    remainingTime: number;\n    progress: number;\n  } {\n    const stream = this.streams.get(streamId);\n    if (!stream) {\n      throw new PaymentError(`Stream not found: ${streamId}`);\n    }\n\n    const currentTime = Date.now();\n    const elapsedTime = Math.min(currentTime - stream.startTime, stream.endTime - stream.startTime);\n    const remainingTime = Math.max(stream.endTime - currentTime, 0);\n    const currentAmount = stream.ratePerSecond * BigInt(Math.floor(elapsedTime / 1000));\n    const remainingAmount = stream.totalAmount - currentAmount;\n    const progress = elapsedTime / (stream.endTime - stream.startTime);\n\n    return {\n      ...stream,\n      currentAmount,\n      remainingAmount,\n      elapsedTime,\n      remainingTime,\n      progress: Math.min(progress, 1),\n    };\n  }\n\n  /**\n   * List all streams\n   */\n  listStreams(activeOnly = false): StreamState[] {\n    const streams = Array.from(this.streams.values());\n    return activeOnly ? streams.filter(s => s.active) : streams;\n  }\n\n  /**\n   * Get stream by payer\n   */\n  getStreamsByPayer(payer: PublicKey): StreamState[] {\n    return Array.from(this.streams.values()).filter(s => s.payer.equals(payer));\n  }\n\n  /**\n   * Get stream by recipient\n   */\n  getStreamsByRecipient(recipient: PublicKey): StreamState[] {\n    return Array.from(this.streams.values()).filter(s => s.recipient.equals(recipient));\n  }\n\n  /**\n   * Clean up completed streams\n   */\n  cleanupCompletedStreams(): number {\n    const currentTime = Date.now();\n    let cleaned = 0;\n\n    for (const [streamId, stream] of this.streams.entries()) {\n      if (!stream.active && currentTime > stream.endTime + 3600000) {\n        // 1 hour after end\n        this.streams.delete(streamId);\n        this.stopStreamMonitoring(streamId);\n        cleaned++;\n      }\n    }\n\n    return cleaned;\n  }\n\n  /**\n   * Generate unique stream ID\n   */\n  private generateStreamId(): string {\n    return `stream_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Validate stream configuration\n   */\n  private validateStreamConfig(config: StreamConfig): void {\n    Validator.validatePublicKey(config.payer, 'payer');\n    Validator.validatePublicKey(config.recipient, 'recipient');\n\n    if (config.ratePerSecond <= 0n) {\n      throw new ValidationError('Rate per second must be greater than 0', 'ratePerSecond');\n    }\n\n    if (config.duration <= 0) {\n      throw new ValidationError('Duration must be greater than 0', 'duration');\n    }\n\n    if (config.duration > 86400) {\n      // 24 hours max\n      throw new ValidationError('Duration cannot exceed 24 hours', 'duration');\n    }\n\n    if (config.payer.equals(config.recipient)) {\n      throw new ValidationError('Payer and recipient cannot be the same', 'recipient');\n    }\n  }\n\n  /**\n   * Create payment transaction\n   */\n  private async createPaymentTransaction(\n    config: StreamConfig,\n    amount: A2AMPLAmount\n  ): Promise<Transaction> {\n    try {\n      const transaction = new Transaction();\n      const payer = config.payer;\n      const recipient = config.recipient;\n\n      // Get token mint for the cluster\n      const tokenMint = TOKEN_MINTS[this._client.cluster === 'mainnet-beta' ? 'mainnet' : 'devnet'];\n\n      // Get associated token accounts\n      const payerTokenAccount = await getAssociatedTokenAddress(\n        tokenMint,\n        payer,\n        false,\n        TOKEN_PROGRAM_ID\n      );\n\n      const recipientTokenAccount = await getAssociatedTokenAddress(\n        tokenMint,\n        recipient,\n        false,\n        TOKEN_PROGRAM_ID\n      );\n\n      // Check if payer token account exists and has sufficient balance\n      await this.validatePayerBalance(payerTokenAccount, amount);\n\n      // Check if recipient token account exists, create if needed\n      await this.ensureRecipientTokenAccount(\n        transaction,\n        recipient,\n        recipientTokenAccount,\n        tokenMint\n      );\n\n      // Create transfer instruction\n      const transferInstruction = createTransferInstruction(\n        payerTokenAccount,\n        recipientTokenAccount,\n        payer,\n        amount,\n        [],\n        TOKEN_PROGRAM_ID\n      );\n\n      transaction.add(transferInstruction);\n\n      // Set recent blockhash and fee payer\n      const { blockhash } = await this._client.connection.getLatestBlockhash();\n      transaction.recentBlockhash = blockhash;\n      transaction.feePayer = payer;\n\n      return transaction;\n    } catch (error) {\n      throw new PaymentError(\n        `Failed to create payment transaction: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n\n  /**\n   * Create refund transaction\n   */\n  private async createRefundTransaction(\n    stream: StreamState,\n    refundAmount: A2AMPLAmount\n  ): Promise<Transaction> {\n    try {\n      const transaction = new Transaction();\n\n      // Get token mint for the cluster\n      const tokenMint = TOKEN_MINTS[this._client.cluster === 'mainnet-beta' ? 'mainnet' : 'devnet'];\n\n      // Get associated token accounts (reverse direction for refund)\n      const recipientTokenAccount = await getAssociatedTokenAddress(\n        tokenMint,\n        stream.recipient,\n        false,\n        TOKEN_PROGRAM_ID\n      );\n\n      const payerTokenAccount = await getAssociatedTokenAddress(\n        tokenMint,\n        stream.payer,\n        false,\n        TOKEN_PROGRAM_ID\n      );\n\n      // Create transfer instruction (from recipient back to payer)\n      const transferInstruction = createTransferInstruction(\n        recipientTokenAccount,\n        payerTokenAccount,\n        stream.recipient,\n        refundAmount,\n        [],\n        TOKEN_PROGRAM_ID\n      );\n\n      transaction.add(transferInstruction);\n\n      // Set recent blockhash and fee payer\n      const { blockhash } = await this._client.connection.getLatestBlockhash();\n      transaction.recentBlockhash = blockhash;\n      transaction.feePayer = stream.recipient;\n\n      return transaction;\n    } catch (error) {\n      throw new PaymentError(\n        `Failed to create refund transaction: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n\n  /**\n   * Start monitoring a stream\n   */\n  private startStreamMonitoring(streamId: string): void {\n    const stream = this.streams.get(streamId);\n    if (!stream) return;\n\n    // Set up timer to automatically stop stream when duration expires\n    const timeout = setTimeout(() => {\n      this.stopStream(streamId).catch(error => {\n        console.error(`Failed to auto-stop stream ${streamId}:`, error);\n      });\n    }, stream.endTime - Date.now());\n\n    this.timers.set(streamId, timeout);\n  }\n\n  /**\n   * Stop monitoring a stream\n   */\n  private stopStreamMonitoring(streamId: string): void {\n    const timeout = this.timers.get(streamId);\n    if (timeout) {\n      clearTimeout(timeout);\n      this.timers.delete(streamId);\n    }\n  }\n\n  /**\n   * Validate payer has sufficient balance\n   */\n  private async validatePayerBalance(\n    payerTokenAccount: PublicKey,\n    _amount: A2AMPLAmount\n  ): Promise<void> {\n    try {\n      const accountInfo = await this._client.getAccountInfo(payerTokenAccount);\n\n      if (!accountInfo) {\n        throw new PaymentError('Payer token account does not exist');\n      }\n\n      // Parse token account data to get balance\n      // This would require proper SPL token account parsing\n    } catch (error) {\n      throw new PaymentError(\n        `Failed to validate payer balance: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n\n  /**\n   * Ensure recipient token account exists\n   */\n  private async ensureRecipientTokenAccount(\n    transaction: Transaction,\n    recipient: PublicKey,\n    recipientTokenAccount: PublicKey,\n    tokenMint: PublicKey\n  ): Promise<void> {\n    try {\n      const accountExists = await this._client.accountExists(recipientTokenAccount);\n\n      if (!accountExists) {\n        // Add instruction to create associated token account\n        const { createAssociatedTokenAccountInstruction } = await import('@solana/spl-token');\n\n        const createAtaInstruction = createAssociatedTokenAccountInstruction(\n          recipient, // payer of the creation fee\n          recipientTokenAccount,\n          recipient,\n          tokenMint,\n          TOKEN_PROGRAM_ID\n        );\n\n        transaction.add(createAtaInstruction);\n      }\n    } catch (error) {\n      throw new PaymentError(\n        `Failed to ensure recipient token account: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n}\n","// Main SDK exports\nexport { SolanaClient } from './client.js';\nexport { AgentAPI } from './agent.js';\nexport { McpAPI } from './mcp.js';\n\n// Type exports\nexport * from './types.js';\n\n// Error exports\nexport * from './errors.js';\n\n// Payment flow exports\nexport * from './payments/index.js';\n\n// IDL exports - specific exports to avoid conflicts\nexport { IdlLoader, KNOWN_IDL_HASHES, loadIdlForNetwork } from './idl/index.js';\nexport type { Idl, AgentRegistryIdl, McpServerRegistryIdl } from './idl/index.js';\n\n// Utility exports\nexport { Validator } from './utils/validation.js';\n\n// SDK class combining all APIs\nimport { Wallet } from '@coral-xyz/anchor';\nimport { SolanaClient } from './client.js';\nimport { AgentAPI } from './agent.js';\nimport { McpAPI } from './mcp.js';\nimport { PrepaymentFlow, PayAsYouGoFlow, StreamPaymentFlow } from './payments/index.js';\nimport { SdkConfig } from './types.js';\n\n/**\n * Main SDK class that provides access to all functionality\n */\nexport class SolanaAIRegistriesSDK {\n  public readonly client: SolanaClient;\n  public readonly agent: AgentAPI;\n  public readonly mcp: McpAPI;\n  public readonly payments: {\n    prepayment: PrepaymentFlow;\n    payAsYouGo: PayAsYouGoFlow;\n    stream: StreamPaymentFlow;\n  };\n\n  constructor(config: SdkConfig) {\n    this.client = new SolanaClient(config);\n    this.agent = new AgentAPI(this.client);\n    this.mcp = new McpAPI(this.client);\n    this.payments = {\n      prepayment: new PrepaymentFlow(this.client),\n      payAsYouGo: new PayAsYouGoFlow(this.client),\n      stream: new StreamPaymentFlow(this.client),\n    };\n  }\n\n  /**\n   * Initialize the SDK with a wallet\n   */\n  async initialize(wallet: Wallet): Promise<void> {\n    await this.client.initialize(wallet);\n  }\n\n  /**\n   * Health check for all SDK components\n   */\n  async healthCheck(): Promise<{\n    client: any;\n    agent: boolean;\n    mcp: boolean;\n    overall: boolean;\n  }> {\n    try {\n      const clientHealth = await this.client.healthCheck();\n      \n      // Test agent API\n      let agentHealthy = false;\n      try {\n        await this.agent.listAgentsByOwner();\n        agentHealthy = true;\n      } catch {\n        agentHealthy = false;\n      }\n\n      // Test MCP API\n      let mcpHealthy = false;\n      try {\n        await this.mcp.listServersByOwner();\n        mcpHealthy = true;\n      } catch {\n        mcpHealthy = false;\n      }\n\n      return {\n        client: clientHealth,\n        agent: agentHealthy,\n        mcp: mcpHealthy,\n        overall: clientHealth.connected && agentHealthy && mcpHealthy,\n      };\n    } catch (error) {\n      return {\n        client: { connected: false, error: error instanceof Error ? error.message : 'Unknown error' },\n        agent: false,\n        mcp: false,\n        overall: false,\n      };\n    }\n  }\n}\n\n/**\n * Factory function to create SDK instance\n */\nexport function createSdk(config: SdkConfig): SolanaAIRegistriesSDK {\n  return new SolanaAIRegistriesSDK(config);\n}\n\n/**\n * Default configuration for different networks\n */\nexport const DEFAULT_CONFIGS = {\n  mainnet: {\n    cluster: 'mainnet-beta' as const,\n    commitment: 'confirmed' as const,\n  },\n  devnet: {\n    cluster: 'devnet' as const,\n    commitment: 'confirmed' as const,\n  },\n  testnet: {\n    cluster: 'testnet' as const,\n    commitment: 'confirmed' as const,\n  },\n} as const;"],"names":[],"mappings":"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"}
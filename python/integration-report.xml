<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="7" failures="7" skipped="0" tests="19" time="19.073" timestamp="2025-07-14T05:58:39.987571+00:00" hostname="pkrvmq0rgcvqdmg"><testcase classname="tests.integration.test_devnet.TestDevnetAgentOperations" name="test_keypair" time="0.001" /><testcase classname="tests.integration.test_devnet.TestDevnetAgentOperations" name="test_agent_full_lifecycle" time="4.339"><failure message="solana_ai_registries.exceptions.RegistrationError: Failed to register agent: Transaction failed after 3 attempts: SendTransactionPreflightFailureMessage { message: &quot;Transaction simulation failed: Blockhash not found&quot;, data: RpcSimulateTransactionResult(RpcSimulateTransactionResult { err: Some(BlockhashNotFound), logs: Some([]), accounts: None, units_consumed: Some(0), return_data: None, inner_instructions: None, replacement_blockhash: None }) }">E   solana_ai_registries.exceptions.TransactionError: Transaction failed after 3 attempts: SendTransactionPreflightFailureMessage { message: "Transaction simulation failed: Blockhash not found", data: RpcSimulateTransactionResult(RpcSimulateTransactionResult { err: Some(BlockhashNotFound), logs: Some([]), accounts: None, units_consumed: Some(0), return_data: None, inner_instructions: None, replacement_blockhash: None }) }

During handling of the above exception, another exception occurred:
E   solana_ai_registries.exceptions.RegistrationError: Failed to register agent: Transaction failed after 3 attempts: SendTransactionPreflightFailureMessage { message: "Transaction simulation failed: Blockhash not found", data: RpcSimulateTransactionResult(RpcSimulateTransactionResult { err: Some(BlockhashNotFound), logs: Some([]), accounts: None, units_consumed: Some(0), return_data: None, inner_instructions: None, replacement_blockhash: None }) }</failure></testcase><testcase classname="tests.integration.test_devnet.TestDevnetAgentOperations" name="test_agent_search_operations" time="3.391"><failure message="solana_ai_registries.exceptions.RegistrationError: Failed to register agent: Transaction failed after 3 attempts: SendTransactionPreflightFailureMessage { message: &quot;Transaction simulation failed: Blockhash not found&quot;, data: RpcSimulateTransactionResult(RpcSimulateTransactionResult { err: Some(BlockhashNotFound), logs: Some([]), accounts: None, units_consumed: Some(0), return_data: None, inner_instructions: None, replacement_blockhash: None }) }">E   solana_ai_registries.exceptions.TransactionError: Transaction failed after 3 attempts: SendTransactionPreflightFailureMessage { message: "Transaction simulation failed: Blockhash not found", data: RpcSimulateTransactionResult(RpcSimulateTransactionResult { err: Some(BlockhashNotFound), logs: Some([]), accounts: None, units_consumed: Some(0), return_data: None, inner_instructions: None, replacement_blockhash: None }) }

During handling of the above exception, another exception occurred:
E   solana_ai_registries.exceptions.RegistrationError: Failed to register agent: Transaction failed after 3 attempts: SendTransactionPreflightFailureMessage { message: "Transaction simulation failed: Blockhash not found", data: RpcSimulateTransactionResult(RpcSimulateTransactionResult { err: Some(BlockhashNotFound), logs: Some([]), accounts: None, units_consumed: Some(0), return_data: None, inner_instructions: None, replacement_blockhash: None }) }</failure></testcase><testcase classname="tests.integration.test_devnet.TestDevnetAgentOperations" name="test_agent_search_operations" time="0.001"><error message="failed on teardown with &quot;RuntimeError: Event loop is closed&quot;">E   RuntimeError: Event loop is closed</error></testcase><testcase classname="tests.integration.test_devnet.TestDevnetMcpOperations" name="test_keypair" time="0.001" /><testcase classname="tests.integration.test_devnet.TestDevnetMcpOperations" name="test_mcp_server_full_lifecycle" time="3.419"><failure message="solana_ai_registries.exceptions.RegistrationError: Failed to register MCP server: Transaction failed after 3 attempts: SendTransactionPreflightFailureMessage { message: &quot;Transaction simulation failed: Blockhash not found&quot;, data: RpcSimulateTransactionResult(RpcSimulateTransactionResult { err: Some(BlockhashNotFound), logs: Some([]), accounts: None, units_consumed: Some(0), return_data: None, inner_instructions: None, replacement_blockhash: None }) }">E   solana_ai_registries.exceptions.TransactionError: Transaction failed after 3 attempts: SendTransactionPreflightFailureMessage { message: "Transaction simulation failed: Blockhash not found", data: RpcSimulateTransactionResult(RpcSimulateTransactionResult { err: Some(BlockhashNotFound), logs: Some([]), accounts: None, units_consumed: Some(0), return_data: None, inner_instructions: None, replacement_blockhash: None }) }

During handling of the above exception, another exception occurred:
E   solana_ai_registries.exceptions.RegistrationError: Failed to register MCP server: Transaction failed after 3 attempts: SendTransactionPreflightFailureMessage { message: "Transaction simulation failed: Blockhash not found", data: RpcSimulateTransactionResult(RpcSimulateTransactionResult { err: Some(BlockhashNotFound), logs: Some([]), accounts: None, units_consumed: Some(0), return_data: None, inner_instructions: None, replacement_blockhash: None }) }</failure></testcase><testcase classname="tests.integration.test_devnet.TestDevnetMcpOperations" name="test_mcp_server_search_operations" time="3.296"><failure message="solana_ai_registries.exceptions.RegistrationError: Failed to register MCP server: Transaction failed after 3 attempts: SendTransactionPreflightFailureMessage { message: &quot;Transaction simulation failed: Blockhash not found&quot;, data: RpcSimulateTransactionResult(RpcSimulateTransactionResult { err: Some(BlockhashNotFound), logs: Some([]), accounts: None, units_consumed: Some(0), return_data: None, inner_instructions: None, replacement_blockhash: None }) }">E   solana_ai_registries.exceptions.TransactionError: Transaction failed after 3 attempts: SendTransactionPreflightFailureMessage { message: "Transaction simulation failed: Blockhash not found", data: RpcSimulateTransactionResult(RpcSimulateTransactionResult { err: Some(BlockhashNotFound), logs: Some([]), accounts: None, units_consumed: Some(0), return_data: None, inner_instructions: None, replacement_blockhash: None }) }

During handling of the above exception, another exception occurred:
E   solana_ai_registries.exceptions.RegistrationError: Failed to register MCP server: Transaction failed after 3 attempts: SendTransactionPreflightFailureMessage { message: "Transaction simulation failed: Blockhash not found", data: RpcSimulateTransactionResult(RpcSimulateTransactionResult { err: Some(BlockhashNotFound), logs: Some([]), accounts: None, units_consumed: Some(0), return_data: None, inner_instructions: None, replacement_blockhash: None }) }</failure></testcase><testcase classname="tests.integration.test_devnet.TestDevnetMcpOperations" name="test_mcp_server_search_operations" time="0.001"><error message="failed on teardown with &quot;RuntimeError: Event loop is closed&quot;">E   RuntimeError: Event loop is closed</error></testcase><testcase classname="tests.integration.test_devnet.TestDevnetPaymentOperations" name="test_payer" time="0.001" /><testcase classname="tests.integration.test_devnet.TestDevnetPaymentOperations" name="test_payee" time="0.001" /><testcase classname="tests.integration.test_devnet.TestDevnetPaymentOperations" name="test_payment_escrow_flow" time="0.001"><error message="failed on setup with &quot;file /home/runner/work/aeamcp/aeamcp/python/tests/integration/test_devnet.py, line 310&#10;      @pytest.mark.asyncio&#10;      async def test_payment_escrow_flow(self, client, test_payer, test_payee):&#10;          &quot;&quot;&quot;Test prepay escrow payment flow.&quot;&quot;&quot;&#10;          payment_manager = PaymentManager(client)&#10;&#10;          # Note: In real testing, payer would need devnet SOL/tokens&#10;          # For now, test the flow structure&#10;&#10;          try:&#10;              # Test escrow balance check (should be 0)&#10;              initial_balance = await payment_manager.get_escrow_balance(&#10;                  payer=test_payer.pubkey(), payee=test_payee.pubkey()&#10;              )&#10;              assert initial_balance == 0&#10;&#10;              # Note: Actual escrow creation would require funded accounts&#10;              print(&quot;Escrow balance check completed successfully&quot;)&#10;&#10;          except Exception as e:&#10;              # Expected for unfunded test accounts&#10;              print(f&quot;Payment test completed with expected error: {e}&quot;)&#10;E       fixture 'test_payer' not found&#10;&gt;       available fixtures: _class_event_loop, _function_event_loop, _module_event_loop, _package_event_loop, _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, class_mocker, client, cov, devnet_client, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_agent_data, mock_agent_entry, mock_client, mock_environment, mock_mcp_server_data, mock_mcp_server_entry, mock_solana_account_info, mock_token_balance, mock_transaction_signature, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, reset_environment_variables, session_mocker, test_keypair, test_pubkey, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, xprocess&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/home/runner/work/aeamcp/aeamcp/python/tests/integration/test_devnet.py:310&quot;">file /home/runner/work/aeamcp/aeamcp/python/tests/integration/test_devnet.py, line 310
      @pytest.mark.asyncio
      async def test_payment_escrow_flow(self, client, test_payer, test_payee):
          """Test prepay escrow payment flow."""
          payment_manager = PaymentManager(client)

          # Note: In real testing, payer would need devnet SOL/tokens
          # For now, test the flow structure

          try:
              # Test escrow balance check (should be 0)
              initial_balance = await payment_manager.get_escrow_balance(
                  payer=test_payer.pubkey(), payee=test_payee.pubkey()
              )
              assert initial_balance == 0

              # Note: Actual escrow creation would require funded accounts
              print("Escrow balance check completed successfully")

          except Exception as e:
              # Expected for unfunded test accounts
              print(f"Payment test completed with expected error: {e}")
E       fixture 'test_payer' not found
&gt;       available fixtures: _class_event_loop, _function_event_loop, _module_event_loop, _package_event_loop, _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, class_mocker, client, cov, devnet_client, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_agent_data, mock_agent_entry, mock_client, mock_environment, mock_mcp_server_data, mock_mcp_server_entry, mock_solana_account_info, mock_token_balance, mock_transaction_signature, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, reset_environment_variables, session_mocker, test_keypair, test_pubkey, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, xprocess
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/home/runner/work/aeamcp/aeamcp/python/tests/integration/test_devnet.py:310</error></testcase><testcase classname="tests.integration.test_devnet.TestDevnetPaymentOperations" name="test_payment_history" time="0.000"><error message="failed on setup with &quot;file /home/runner/work/aeamcp/aeamcp/python/tests/integration/test_devnet.py, line 332&#10;      @pytest.mark.asyncio&#10;      async def test_payment_history(self, client, test_payer):&#10;          &quot;&quot;&quot;Test payment history retrieval.&quot;&quot;&quot;&#10;          payment_manager = PaymentManager(client)&#10;&#10;          # Get payment history (should be empty for new test account)&#10;          history = await payment_manager.get_payment_history(test_payer.pubkey())&#10;&#10;          # For a new test account, history should be empty&#10;          assert isinstance(history, list)&#10;          print(f&quot;Retrieved payment history with {len(history)} entries&quot;)&#10;E       fixture 'test_payer' not found&#10;&gt;       available fixtures: _class_event_loop, _function_event_loop, _module_event_loop, _package_event_loop, _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, class_mocker, client, cov, devnet_client, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_agent_data, mock_agent_entry, mock_client, mock_environment, mock_mcp_server_data, mock_mcp_server_entry, mock_solana_account_info, mock_token_balance, mock_transaction_signature, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, reset_environment_variables, session_mocker, test_keypair, test_pubkey, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, xprocess&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/home/runner/work/aeamcp/aeamcp/python/tests/integration/test_devnet.py:332&quot;">file /home/runner/work/aeamcp/aeamcp/python/tests/integration/test_devnet.py, line 332
      @pytest.mark.asyncio
      async def test_payment_history(self, client, test_payer):
          """Test payment history retrieval."""
          payment_manager = PaymentManager(client)

          # Get payment history (should be empty for new test account)
          history = await payment_manager.get_payment_history(test_payer.pubkey())

          # For a new test account, history should be empty
          assert isinstance(history, list)
          print(f"Retrieved payment history with {len(history)} entries")
E       fixture 'test_payer' not found
&gt;       available fixtures: _class_event_loop, _function_event_loop, _module_event_loop, _package_event_loop, _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, class_mocker, client, cov, devnet_client, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_agent_data, mock_agent_entry, mock_client, mock_environment, mock_mcp_server_data, mock_mcp_server_entry, mock_solana_account_info, mock_token_balance, mock_transaction_signature, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, reset_environment_variables, session_mocker, test_keypair, test_pubkey, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, xprocess
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/home/runner/work/aeamcp/aeamcp/python/tests/integration/test_devnet.py:332</error></testcase><testcase classname="tests.integration.test_devnet.TestDevnetPaymentOperations" name="test_streaming_payment_simulation" time="0.001"><error message="failed on setup with &quot;file /home/runner/work/aeamcp/aeamcp/python/tests/integration/test_devnet.py, line 344&#10;      @pytest.mark.asyncio&#10;      async def test_streaming_payment_simulation(self, client, test_payer, test_payee):&#10;          &quot;&quot;&quot;Test streaming payment structure (simulation).&quot;&quot;&quot;&#10;          payment_manager = PaymentManager(client)&#10;&#10;          # Test streaming payment calculation logic&#10;          total_amount = 1000000  # 1 A2AMPL&#10;          stream_duration = 60  # 60 seconds&#10;          payment_interval = 10.0  # Every 10 seconds&#10;&#10;          rate, interval_amount, num_payments = payment_manager._calculate_stream_amounts(&#10;              total_amount, stream_duration, payment_interval&#10;          )&#10;&#10;          assert rate &gt; 0&#10;          assert interval_amount &gt; 0&#10;          assert num_payments == 6  # 60/10 = 6 payments&#10;          assert interval_amount * num_payments == total_amount&#10;&#10;          print(&#10;              f&quot;Streaming calculation: {num_payments} payments of {interval_amount} each&quot;&#10;          )&#10;E       fixture 'test_payer' not found&#10;&gt;       available fixtures: _class_event_loop, _function_event_loop, _module_event_loop, _package_event_loop, _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, class_mocker, client, cov, devnet_client, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_agent_data, mock_agent_entry, mock_client, mock_environment, mock_mcp_server_data, mock_mcp_server_entry, mock_solana_account_info, mock_token_balance, mock_transaction_signature, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, reset_environment_variables, session_mocker, test_keypair, test_pubkey, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, xprocess&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/home/runner/work/aeamcp/aeamcp/python/tests/integration/test_devnet.py:344&quot;">file /home/runner/work/aeamcp/aeamcp/python/tests/integration/test_devnet.py, line 344
      @pytest.mark.asyncio
      async def test_streaming_payment_simulation(self, client, test_payer, test_payee):
          """Test streaming payment structure (simulation)."""
          payment_manager = PaymentManager(client)

          # Test streaming payment calculation logic
          total_amount = 1000000  # 1 A2AMPL
          stream_duration = 60  # 60 seconds
          payment_interval = 10.0  # Every 10 seconds

          rate, interval_amount, num_payments = payment_manager._calculate_stream_amounts(
              total_amount, stream_duration, payment_interval
          )

          assert rate &gt; 0
          assert interval_amount &gt; 0
          assert num_payments == 6  # 60/10 = 6 payments
          assert interval_amount * num_payments == total_amount

          print(
              f"Streaming calculation: {num_payments} payments of {interval_amount} each"
          )
E       fixture 'test_payer' not found
&gt;       available fixtures: _class_event_loop, _function_event_loop, _module_event_loop, _package_event_loop, _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, class_mocker, client, cov, devnet_client, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_agent_data, mock_agent_entry, mock_client, mock_environment, mock_mcp_server_data, mock_mcp_server_entry, mock_solana_account_info, mock_token_balance, mock_transaction_signature, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, reset_environment_variables, session_mocker, test_keypair, test_pubkey, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, xprocess
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/home/runner/work/aeamcp/aeamcp/python/tests/integration/test_devnet.py:344</error></testcase><testcase classname="tests.integration.test_devnet.TestDevnetClientOperations" name="test_keypair" time="0.001" /><testcase classname="tests.integration.test_devnet.TestDevnetClientOperations" name="test_client_connection" time="0.001"><failure message="AttributeError: 'SolanaAIRegistriesClient' object has no attribute '_ensure_connected'">E   AttributeError: 'SolanaAIRegistriesClient' object has no attribute '_ensure_connected'</failure></testcase><testcase classname="tests.integration.test_devnet.TestDevnetClientOperations" name="test_pda_derivation" time="0.001"><failure message="AttributeError: 'solders.pubkey.Pubkey' object has no attribute 'encode'">E   AttributeError: 'solders.pubkey.Pubkey' object has no attribute 'encode'</failure></testcase><testcase classname="tests.integration.test_devnet.TestDevnetClientOperations" name="test_instruction_building" time="0.001"><failure message="AttributeError: 'SolanaAIRegistriesClient' object has no attribute 'build_payment_instruction'. Did you mean: 'build_update_agent_instruction'?">E   AttributeError: 'SolanaAIRegistriesClient' object has no attribute 'build_payment_instruction'. Did you mean: 'build_update_agent_instruction'?</failure></testcase><testcase classname="tests.integration.test_devnet.TestDevnetClientOperations" name="test_account_info_retrieval" time="0.248"><error message="failed on teardown with &quot;RuntimeError: Event loop is closed&quot;">E   RuntimeError: Event loop is closed</error></testcase><testcase classname="tests.integration.test_devnet.TestDevnetEndToEndScenarios" name="test_complete_ecosystem_flow" time="4.324"><error message="failed on teardown with &quot;RuntimeError: Event loop is closed&quot;">E   RuntimeError: Event loop is closed</error></testcase></testsuite></testsuites>
[build-system]
requires = ["hatchling>=1.8.0"]
build-backend = "hatchling.build"

[project]
name = "solana-ai-registries"
version = "0.1.0"
description = "Python SDK for Solana AI Registries"
authors = [
    {name = "AEAMCP Team", email = "dev@aeamcp.org"},
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9", 
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: System :: Distributed Computing",
]
keywords = [
    "solana",
    "blockchain", 
    "ai",
    "agent",
    "mcp",
    "registry",
    "web3",
]
dependencies = [
    "solana>=0.36.0,<1.0.0",
    "anchorpy>=0.21.0,<1.0.0",
    "typing-extensions>=4.0.0",
    "httpx>=0.28.0",
    "pydantic>=2.0.0,<3.0.0",
    "websockets>=9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    "flake8>=6.0.0",
    "pre-commit>=3.0.0",
]
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "sphinxcontrib-asyncio>=0.3.0",
]
examples = [
    "jupyter>=1.0.0",
    "notebook>=6.5.0",
]

[project.urls]
Homepage = "https://github.com/openSVM/aeamcp"
Documentation = "https://aeamcp.readthedocs.io"
Repository = "https://github.com/openSVM/aeamcp"
Issues = "https://github.com/openSVM/aeamcp/issues"
Changelog = "https://github.com/openSVM/aeamcp/blob/main/CHANGELOG.md"

[tool.hatch.build.targets.wheel]
packages = ["solana_ai_registries"]

[tool.hatch.build.targets.sdist]
include = [
    "/solana_ai_registries",
    "/tests",
    "/README.md",
    "/LICENSE",
]

# ============================================================================
# CODE QUALITY TOOLS
# ============================================================================

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.venv
  | build
  | dist
  | \.tox
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "solana.*",
    "anchorpy.*",
]
ignore_missing_imports = true

[tool.flake8]
max-line-length = 88
extend-ignore = [
    "E203",  # whitespace before ':'
    "W503",  # line break before binary operator
    "E501",  # line too long (handled by black)
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    ".tox",
]

# ============================================================================
# TESTING CONFIGURATION
# ============================================================================

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--disable-warnings",
    "--tb=short",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: fast unit tests that don't require network",
    "integration: integration tests requiring devnet", 
    "devnet: tests specifically for devnet environment",
    "slow: tests that take longer than 1 second",
    "asyncio: async tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["solana_ai_registries"]
omit = [
    "*/tests/*",
    "*/conftest.py",
    "*/__init__.py",
    "*/setup.py",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__", 
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2
fail_under = 90

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# ============================================================================
# DOCUMENTATION CONFIGURATION
# ============================================================================

[tool.sphinx]
source-dir = "docs"
build-dir = "docs/_build"

# ============================================================================
# DEVELOPMENT TOOLS
# ============================================================================

[tool.pre-commit]
repos = [
    {repo = "https://github.com/psf/black", rev = "23.3.0", hooks = [{id = "black", language_version = "python3"}]},
    {repo = "https://github.com/pycqa/isort", rev = "5.12.0", hooks = [{id = "isort"}]},
    {repo = "https://github.com/pycqa/flake8", rev = "6.0.0", hooks = [{id = "flake8"}]},
    {repo = "https://github.com/pre-commit/mirrors-mypy", rev = "v1.3.0", hooks = [{id = "mypy", additional_dependencies = ["types-all"]}]},
]